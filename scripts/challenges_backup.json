{
    "challenges": [
        {
            "_id": 1,
            "title": "Hello, World!",
            "description": "Write a program that prints \"Hello, World!\" to the console.",
            "examples": {
                "output": "Hello, World!"
            },
            "notes": [
                "The output must match exactly, including capitalization and punctuation",
                "Make sure to include the exclamation mark",
                "There should be no extra spaces or new lines"
            ],
            "testCases": [
                {
                    "input": "",
                    "expectedOutput": "Hello, World!"
                }
            ],
            "difficulty": "Beginner",
            "points": 10,
            "category": "Basics"
        },
        {
            "_id": 2,
            "title": "Even Numbers",
            "description": "Write a program that prints all even numbers from 1 to 100, each on a new line.",
            "examples": {
                "output": "2\n4\n6\n...\n98\n100"
            },
            "notes": [
                "Print each number on a new line",
                "Only print even numbers",
                "Include both 2 and 100 in the output"
            ],
            "testCases": [
                {
                    "input": "",
                    "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100"
                }
            ],
            "difficulty": "Easy",
            "points": 10,
            "category": "Loops"
        },
        {
            "_id": 3,
            "title": "Prime Number Checker",
            "description": "Write a function is_prime(n) that takes a number n and returns True if it's prime, False otherwise.",
            "examples": {
                "output": "True\nFalse"
            },
            "notes": [
                "A prime number is a number greater than 1 that is only divisible by 1 and itself",
                "Return True for prime numbers, False for non-prime numbers",
                "Handle numbers up to 1000"
            ],
            "testCases": [
                {
                    "input": "17",
                    "expectedOutput": "True"
                },
                {
                    "input": "4",
                    "expectedOutput": "False"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Functions"
        },
        {
            "_id": 4,
            "title": "Number Swapper",
            "description": "Write a program that swaps two numbers without using a third variable. Take two numbers as input and print them after swapping.",
            "examples": {
                "output": "After swap: a = 20, b = 10"
            },
            "notes": [
                "Don't use a temporary variable",
                "Use arithmetic operations to swap",
                "Print the result in the exact format shown"
            ],
            "testCases": [
                {
                    "input": "10 20",
                    "expectedOutput": "After swap: a = 20, b = 10"
                }
            ],
            "difficulty": "Easy",
            "points": 10,
            "category": "Basics"
        },
        {
            "_id": 5,
            "title": "Factorial Calculator",
            "description": "Write a function factorial(n) that returns the factorial of a given number n.",
            "examples": {
                "output": "120"
            },
            "notes": [
                "Handle numbers from 0 to 10",
                "Return the result as a number",
                "Remember that 0! = 1"
            ],
            "testCases": [
                {
                    "input": "5",
                    "expectedOutput": "120"
                },
                {
                    "input": "0",
                    "expectedOutput": "1"
                }
            ],
            "difficulty": "Easy",
            "points": 10,
            "category": "Variables"
        },
        {
            "_id": 6,
            "title": "String Reverser",
            "description": "Write a function reverse_string(s) that returns the reverse of a given string.",
            "examples": {
                "output": "olleh"
            },
            "notes": [
                "Don't use the built-in reverse function",
                "Handle strings of any length",
                "Preserve case of letters"
            ],
            "testCases": [
                {
                    "input": "hello",
                    "expectedOutput": "olleh"
                },
                {
                    "input": "Python",
                    "expectedOutput": "nohtyP"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Loops"
        },
        {
            "_id": 7,
            "title": "Palindrome Checker",
            "description": "Write a function is_palindrome(s) that returns True if the string is a palindrome, False otherwise.",
            "examples": {
                "output": "True"
            },
            "notes": [
                "A palindrome reads the same forwards and backwards",
                "Ignore case when checking",
                "Ignore spaces and punctuation"
            ],
            "testCases": [
                {
                    "input": "racecar",
                    "expectedOutput": "True"
                },
                {
                    "input": "hello",
                    "expectedOutput": "False"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Loops"
        },
        {
            "_id": 8,
            "title": "Largest of Three",
            "description": "Write a program that finds the largest among three numbers. Take three numbers as input and print the largest one.",
            "examples": {
                "output": "30"
            },
            "notes": [
                "Handle negative numbers",
                "Handle equal numbers",
                "Print only the largest number"
            ],
            "testCases": [
                {
                    "input": "10 30 20",
                    "expectedOutput": "30"
                },
                {
                    "input": "-5 0 -10",
                    "expectedOutput": "0"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Functions"
        },
        {
            "_id": 9,
            "title": "Vowel Counter",
            "description": "Write a program that counts vowels and consonants in a string. Print the counts on separate lines.",
            "examples": {
                "output": "Vowels: 2\nConsonants: 3"
            },
            "notes": [
                "Consider a, e, i, o, u as vowels",
                "Ignore case when counting",
                "Ignore spaces and special characters"
            ],
            "testCases": [
                {
                    "input": "hello",
                    "expectedOutput": "Vowels: 2\nConsonants: 3"
                }
            ],
            "difficulty": "Hard",
            "points": 50,
            "category": "Functions"
        },
        {
            "_id": 10,
            "title": "Fibonacci Series",
            "description": "Write a program that prints the Fibonacci series up to n terms. Take n as input.",
            "examples": {
                "output": "0 1 1 2 3 5 8"
            },
            "notes": [
                "Start with 0 and 1",
                "Print numbers space-separated",
                "Handle n up to 20"
            ],
            "testCases": [
                {
                    "input": "7",
                    "expectedOutput": "0 1 1 2 3 5 8"
                }
            ],
            "difficulty": "Hard",
            "points": 50,
            "category": "Functions"
        },
        {
            "_id": 11,
            "title": "Digit Sum",
            "description": "Write a function digit_sum(n) that calculates the sum of digits in a number.",
            "examples": {
                "output": "6"
            },
            "notes": [
                "Handle positive integers",
                "Return the sum as a number",
                "Handle numbers up to 1000000"
            ],
            "testCases": [
                {
                    "input": "123",
                    "expectedOutput": "6"
                }
            ],
            "difficulty": "Easy",
            "points": 10,
            "category": "Lists"
        },
        {
            "_id": 12,
            "title": "List Duplicates Remover",
            "description": "Write a function remove_duplicates(lst) that removes duplicates from a list without using set().",
            "examples": {
                "output": "[1, 2, 3, 4]"
            },
            "notes": [
                "Don't use set()",
                "Preserve the order of first occurrence",
                "Return the modified list"
            ],
            "testCases": [
                {
                    "input": "[1, 2, 2, 3, 4, 3]",
                    "expectedOutput": "[1, 2, 3, 4]"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Lists"
        },
        {
            "_id": 13,
            "title": "List Sorter",
            "description": "Write a function sort_list(lst) that sorts a list in ascending order without using the built-in sort() or sorted() functions.",
            "examples": {
                "output": "[1, 2, 3, 4, 5]"
            },
            "notes": [
                "Don't use built-in sorting functions",
                "Use any sorting algorithm",
                "Return the sorted list"
            ],
            "testCases": [
                {
                    "input": "[5, 2, 1, 4, 3]",
                    "expectedOutput": "[1, 2, 3, 4, 5]"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Lists"
        },
        {
            "_id": 14,
            "title": "Prime Range Finder",
            "description": "Write a function find_primes(start, end) that finds all prime numbers in a given range.",
            "examples": {
                "output": "[2, 3, 5, 7]"
            },
            "notes": [
                "Include both start and end in the range",
                "Return the list of prime numbers",
                "Handle ranges up to 1000"
            ],
            "testCases": [
                {
                    "input": "1 10",
                    "expectedOutput": "[2, 3, 5, 7]"
                }
            ],
            "difficulty": "Hard",
            "points": 50,
            "category": "Lists"
        },
        {
            "_id": 15,
            "title": "Armstrong Number",
            "description": "Write a function is_armstrong(n) that checks if a number is an Armstrong number.",
            "examples": {
                "output": "True"
            },
            "notes": [
                "An Armstrong number is a number that equals the sum of its own digits raised to the number of digits",
                "Return True or False",
                "Handle numbers up to 1000"
            ],
            "testCases": [
                {
                    "input": "153",
                    "expectedOutput": "True"
                },
                {
                    "input": "123",
                    "expectedOutput": "False"
                }
            ],
            "difficulty": "Hard",
            "points": 50,
            "category": "Lists"
        },
        {
            "_id": 16,
            "title": "Simple Calculator",
            "description": "Write a calculator program that can perform basic arithmetic operations (+, -, *, /).",
            "examples": {
                "output": "15.0"
            },
            "notes": [
                "Support +, -, *, / operations",
                "Handle floating point numbers",
                "Handle division by zero"
            ],
            "testCases": [
                {
                    "input": "10 + 5",
                    "expectedOutput": "15.0"
                },
                {
                    "input": "10 * 3",
                    "expectedOutput": "30.0"
                }
            ],
            "difficulty": "Medium",
            "points": 30,
            "category": "Strings"
        },
        {
            "_id": 17,
            "title": "Character Frequency",
            "description": "Write a function char_frequency(s) that counts the frequency of each character in a string.",
            "examples": {
                "output": "{'h': 1, 'e': 1, 'l': 2, 'o': 1}"
            },
            "notes": [
                "Return a dictionary with character counts",
                "Consider case sensitivity",
                "Include all characters, not just letters"
            ],
            "testCases": [
                {
                    "input": "hello",
                    "expectedOutput": "{'h': 1, 'e': 1, 'l': 2, 'o': 1}"
                }
            ],
            "difficulty": "Hard",
            "points": 50,
            "category": "Strings"
        },
        {
            "_id": 18,
            "title": "Merge Sorted Lists",
            "description": "Write a function merge_lists(lst1, lst2) that merges two sorted lists into a single sorted list.",
            "examples": {
                "output": "[1, 2, 3, 4, 5, 6]"
            },
            "notes": [
                "Both input lists are already sorted",
                "Don't use sort() after merging",
                "Return the merged sorted list"
            ],
            "testCases": [
                {
                    "input": "[1, 3, 5], [2, 4, 6]",
                    "expectedOutput": "[1, 2, 3, 4, 5, 6]"
                }
            ],
            "difficulty": "Expert",
            "points": 100,
            "category": "Algorithms"
        },
        {
            "_id": 19,
            "title": "Anagram Checker",
            "description": "Write a function are_anagrams(s1, s2) that checks if two strings are anagrams.",
            "examples": {
                "output": "True"
            },
            "notes": [
                "Ignore case",
                "Ignore spaces and punctuation",
                "Return True or False"
            ],
            "testCases": [
                {
                    "input": "listen silent",
                    "expectedOutput": "True"
                },
                {
                    "input": "hello world",
                    "expectedOutput": "False"
                }
            ],
            "difficulty": "Expert",
            "points": 100,
            "category": "Algorithms"
        },
        {
            "_id": 20,
            "title": "Second Largest",
            "description": "Write a function find_second_largest(lst) that finds the second largest number in a list.",
            "examples": {
                "output": "4"
            },
            "notes": [
                "Handle duplicates",
                "Return None if list has fewer than 2 unique elements",
                "Consider edge cases"
            ],
            "testCases": [
                {
                    "input": "[1, 5, 3, 4, 2]",
                    "expectedOutput": "4"
                }
            ],
            "difficulty": "Expert",
            "points": 100,
            "category": "Algorithms"
        }
    ]
}