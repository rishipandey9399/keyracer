document.addEventListener('DOMContentLoaded', () => {
    initTutorial();
    initSubmenus();
    initCodeEditors();
    handleTryItButtons();
});

function initTutorial() {
    const menuItems = document.querySelectorAll('.menu-item');
    const sections = document.querySelectorAll('.tutorial-section');
    const subsectionItems = document.querySelectorAll('.subsection-item');

    // Set initial active states
    setInitialActiveStates();

    // Handle main menu item clicks
    menuItems.forEach(item => {
        item.addEventListener('click', (e) => {
            if (!item.classList.contains('has-submenu')) {
                e.preventDefault();
                const targetId = item.getAttribute('href').substring(1);
                switchToSection(targetId);
                updateMenuActiveStates(item);
            }
        });
    });

    // Handle subsection item clicks
    subsectionItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = item.getAttribute('href').substring(1);
            const parentSection = item.closest('.menu-item').getAttribute('href').substring(1);
            
            switchToSection(parentSection);
            updateMenuActiveStates(item.closest('.menu-item'));
            updateSubmenuActiveStates(item);
            
            // Scroll to subsection after a short delay to ensure section is visible
            setTimeout(() => {
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            }, 100);
        });
    });
}

function initSubmenus() {
    const menuItems = document.querySelectorAll('.menu-item');
    
    menuItems.forEach(item => {
        // If menu item has submenu, add the has-submenu class
        if (item.querySelector('.subsection-menu')) {
            item.classList.add('has-submenu');
            
            // Toggle submenu on click
            item.addEventListener('click', (e) => {
                if (item.classList.contains('has-submenu')) {
                    e.preventDefault();
                    toggleSubmenu(item);
                }
            });
        }
    });
}

function toggleSubmenu(menuItem) {
    const wasActive = menuItem.classList.contains('active');
    
    // Close all submenus
    document.querySelectorAll('.menu-item').forEach(item => {
        if (item !== menuItem) {
            item.classList.remove('active');
        }
    });
    
    // Toggle the clicked item
    menuItem.classList.toggle('active');
}

function setInitialActiveStates() {
    const sections = document.querySelectorAll('.tutorial-section');
    const menuItems = document.querySelectorAll('.menu-item');
    
    // Hide all sections except the first one
    sections.forEach((section, index) => {
        if (index === 0) {
            section.classList.add('active');
            // Find and activate corresponding menu item
            const menuItem = document.querySelector(`.menu-item[href="#${section.id}"]`);
            if (menuItem) {
                menuItem.classList.add('active');
            }
        } else {
            section.classList.remove('active');
        }
    });
}

function switchToSection(sectionId) {
    const sections = document.querySelectorAll('.tutorial-section');
    
    sections.forEach(section => {
        if (section.id === sectionId) {
            section.style.opacity = '0';
            section.classList.add('active');
            
            // Trigger reflow for smooth transition
            void section.offsetWidth;
            
            // Fade in the section
            section.style.opacity = '1';
        } else {
            section.classList.remove('active');
        }
    });
}

function updateMenuActiveStates(activeItem) {
    // Remove active class from all menu items
    document.querySelectorAll('.menu-item').forEach(item => {
        if (item !== activeItem && !item.contains(activeItem)) {
            item.classList.remove('active');
        }
    });
}

function updateSubmenuActiveStates(activeItem) {
    // Remove active class from all subsection items
    document.querySelectorAll('.subsection-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to clicked subsection item
    activeItem.classList.add('active');
            }
        });
    });

    // Handle menu item highlighting and section display
    const initMenuHighlighting = () => {
        const menuItems = document.querySelectorAll('.menu-item');
        const sections = document.querySelectorAll('.tutorial-section');

        const switchSection = (targetId) => {
            // Remove active class from all sections
            sections.forEach(section => {
                section.classList.remove('active');
            });

            // Remove active class from all menu items
            menuItems.forEach(item => {
                item.classList.remove('active');
            });

            // Add active class to target section and menu item
            const targetSection = document.getElementById(targetId);
            const targetMenuItem = document.querySelector(`[href="#${targetId}"]`);
            
            if (targetSection && targetMenuItem) {
                targetSection.classList.add('active');
                targetMenuItem.classList.add('active');
            }
        };

        // Set up click handlers for menu items
        menuItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = item.getAttribute('href').substring(1);
                switchSection(targetId);
            });
        });

        // Handle initial section display
        const hash = window.location.hash.substring(1) || 'introduction';
        switchSection(hash);
    };

    // Initialize code editors with Python syntax highlighting
    const initCodeEditors = () => {
        const editors = document.querySelectorAll('.code-editor');
        
        editors.forEach(editor => {
            const runBtn = editor.querySelector('.run-btn');
            const codeInput = editor.querySelector('.code-input');
            const outputContent = editor.querySelector('.output-content');

            // Handle Run button click
            runBtn.addEventListener('click', () => {
                const code = codeInput.value;
                try {
                    // In a real implementation, this would send the code to a Python interpreter
                    // For now, we'll just simulate output
                    simulateCodeExecution(code, outputContent);
                } catch (error) {
                    outputContent.innerHTML = `<span style="color: red;">Error: ${error.message}</span>`;
                }
            });

            // Enable tab key in textarea
            codeInput.addEventListener('keydown', (e) => {
                if (e.key === 'Tab') {
                    e.preventDefault();
                    const start = codeInput.selectionStart;
                    const end = codeInput.selectionEnd;
                    codeInput.value = codeInput.value.substring(0, start) + '    ' 
                                  + codeInput.value.substring(end);
                    codeInput.selectionStart = codeInput.selectionEnd = start + 4;
                }
            });
        });
    };

    // Initialize interactive examples
    const initExamples = () => {
        const examples = document.querySelectorAll('.code-demo');
        
        examples.forEach(example => {
            const tryBtn = example.querySelector('.try-it-btn');
            if (tryBtn) {
                tryBtn.addEventListener('click', () => {
                    // Find the closest practice section
                    const practiceSection = example.closest('.tutorial-section')
                                                 .querySelector('.practice-section');
                    const codeInput = practiceSection.querySelector('.code-input');
                    const codeExample = example.querySelector('code').textContent.trim();
                    
                    // Copy example code to practice area
                    codeInput.value = codeExample;
                    codeInput.focus();
                });
            }
        });
    };

    // Simulate Python code execution (for demonstration)
    const simulateCodeExecution = (code, outputElement) => {
        // Basic simulation of Python output
        if (code.includes('print')) {
            const match = code.match(/print\((.*)\)/);
            if (match) {
                try {
                    let output = eval(match[1]); // Note: This is just for demo purposes
                    outputElement.innerHTML = output;
                } catch {
                    outputElement.innerHTML = match[1].replace(/['"]/g, '');
                }
            }
        } else {
            outputElement.innerHTML = 'No output';
        }
    };

    // Initialize the tutorial
    initTutorial();
});
