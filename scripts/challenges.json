{
    "challenges": [
        {
            "id": 101,
            "language": "java",
            "title": "Java Hello World",
            "description": "Write a Java program that prints 'Hello, World!' to the console.",
            "examples": { "output": "Hello, World!" },
            "notes": ["Use System.out.println", "Output must match exactly"],
            "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 102,
            "language": "java",
            "title": "Java Even Numbers",
            "description": "Print all even numbers from 2 to 100 in Java.",
            "examples": { "output": "2\n4\n6\n8\n10\n...\n98\n100" },
            "notes": ["Use a for loop", "Print each number on a new line"],
            "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 103,
            "language": "java",
            "title": "Java Swap Two Numbers",
            "description": "Swap two numbers without using a third variable in Java.",
            "examples": { "output": "After swap: a = 20, b = 10" },
            "notes": ["Don't use a temporary variable", "Use arithmetic operations"],
            "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 104,
            "language": "java",
            "title": "Java Prime Number Checker",
            "description": "Write a Java method isPrime(int n) that returns true if n is prime.",
            "examples": { "output": "true\nfalse" },
            "notes": ["Return true for prime numbers, false otherwise", "Handle up to 1000"],
            "testCases": [ { "input": "17", "expectedOutput": "true" }, { "input": "4", "expectedOutput": "false" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        { "id": 105, "language": "java", "title": "Java Factorial", "description": "Write a Java method to calculate the factorial of a number.", "examples": { "output": "120" }, "notes": ["Use recursion or loop"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 106, "language": "java", "title": "Java Fibonacci", "description": "Print the first N Fibonacci numbers.", "examples": { "output": "0 1 1 2 3" }, "notes": ["Use loop or recursion"], "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 107, "language": "java", "title": "Java Reverse String", "description": "Reverse a given string in Java.", "examples": { "output": "cba" }, "notes": ["Use StringBuilder or loop"], "testCases": [ { "input": "abc", "expectedOutput": "cba" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 108, "language": "java", "title": "Java Palindrome Checker", "description": "Check if a string is a palindrome.", "examples": { "output": "true" }, "notes": ["Ignore case"], "testCases": [ { "input": "Madam", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 109, "language": "java", "title": "Java Sum Array", "description": "Sum all elements in an integer array.", "examples": { "output": "15" }, "notes": ["Use for loop"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 110, "language": "java", "title": "Java Find Max", "description": "Find the maximum value in an array.", "examples": { "output": "9" }, "notes": ["Use for loop"], "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 111, "language": "java", "title": "Java Count Vowels", "description": "Count the number of vowels in a string.", "examples": { "output": "3" }, "notes": ["Ignore case"], "testCases": [ { "input": "Hello", "expectedOutput": "2" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 112, "language": "java", "title": "Java Remove Spaces", "description": "Remove all spaces from a string.", "examples": { "output": "HelloWorld" }, "notes": ["Use replaceAll"], "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 113, "language": "java", "title": "Java Array Sort", "description": "Sort an array of integers in ascending order.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use Arrays.sort"], "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 114, "language": "java", "title": "Java Character Frequency", "description": "Count frequency of each character in a string.", "examples": { "output": "a:2 b:1" }, "notes": ["Use HashMap"], "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 115, "language": "java", "title": "Java Leap Year", "description": "Check if a year is a leap year.", "examples": { "output": "true" }, "notes": ["Use modulo"], "testCases": [ { "input": "2020", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 116, "language": "java", "title": "Java Sum Digits", "description": "Sum all digits of a number.", "examples": { "output": "6" }, "notes": ["Use loop"], "testCases": [ { "input": "123", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 117, "language": "java", "title": "Java Remove Duplicates", "description": "Remove duplicate elements from an array.", "examples": { "output": "1 2 3" }, "notes": ["Use Set"], "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 118, "language": "java", "title": "Java Reverse Array", "description": "Reverse an array of integers.", "examples": { "output": "5 4 3 2 1" }, "notes": ["Use loop"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 119, "language": "java", "title": "Java Sum Even Numbers", "description": "Sum all even numbers in an array.", "examples": { "output": "6" }, "notes": ["Use modulo"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 130, "language": "python", "title": "Python Hello World", "description": "Write a Python program that prints 'Hello, World!' to the console.", "examples": { "output": "Hello, World!" }, "notes": ["Use print()"], "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 149, "language": "python", "title": "Python Add Two Numbers", "description": "Write a Python program to add two numbers: 5 + 3.", "examples": { "output": "8" }, "notes": ["Use arithmetic operator +"], "testCases": [ { "input": "", "expectedOutput": "8" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 150, "language": "python", "title": "Python Add Two Input Numbers", "description": "Take two numbers as input and print their sum.", "examples": { "output": "Sum: 8" }, "notes": ["Use input() without prompts", "Print format: 'Sum: result'"], "testCases": [ { "input": "5\n3", "expectedOutput": "Sum: 8" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 151, "language": "python", "title": "Python Compare Two Numbers", "description": "Input 2 int numbers a and b. Print True if a >= b, else print False.", "examples": { "output": "True" }, "notes": ["Use >= operator"], "testCases": [ { "input": "5\n3", "expectedOutput": "True" }, { "input": "2\n7", "expectedOutput": "False" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 152, "language": "python", "title": "Python Average of Two Floats", "description": "Input 2 floating point numbers and print their average.", "examples": { "output": "4.5" }, "notes": ["Use float() and division"], "testCases": [ { "input": "3.5\n5.5", "expectedOutput": "4.5" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 153, "language": "python", "title": "Python Square Area", "description": "Input side of a square and print its area.", "examples": { "output": "25" }, "notes": ["Area = side * side"], "testCases": [ { "input": "5", "expectedOutput": "25" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 131, "language": "python", "title": "Python Even Numbers", "description": "Print all even numbers from 2 to 100 in Python.", "examples": { "output": "2\n4\n6\n8\n10\n...\n98\n100" }, "notes": ["Use for loop", "Print each number on a new line"], "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 132, "language": "python", "title": "Python Swap Two Numbers", "description": "Swap two numbers without using a third variable in Python.", "examples": { "output": "After swap: a = 20, b = 10" }, "notes": ["Use tuple assignment"], "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 133, "language": "python", "title": "Python Prime Number Checker", "description": "Write a Python function is_prime(n) that returns True if n is prime.", "examples": { "output": "True\nFalse" }, "notes": ["Return True for prime numbers, False otherwise", "Handle up to 1000"], "testCases": [ { "input": "17", "expectedOutput": "True" }, { "input": "4", "expectedOutput": "False" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 134, "language": "python", "title": "Python Factorial", "description": "Write a Python function to calculate the factorial of a number.", "examples": { "output": "120" }, "notes": ["Use recursion or loop"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 135, "language": "python", "title": "Python Fibonacci", "description": "Print the first N Fibonacci numbers.", "examples": { "output": "0 1 1 2 3" }, "notes": ["Use loop or recursion"], "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 136, "language": "python", "title": "Python Reverse String", "description": "Reverse a given string in Python.", "examples": { "output": "cba" }, "notes": ["Use slicing"], "testCases": [ { "input": "abc", "expectedOutput": "cba" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 137, "language": "python", "title": "Python Palindrome Checker", "description": "Check if a string is a palindrome.", "examples": { "output": "True" }, "notes": ["Ignore case"], "testCases": [ { "input": "Madam", "expectedOutput": "True" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 138, "language": "python", "title": "Python Sum Array", "description": "Sum all elements in a list.", "examples": { "output": "15" }, "notes": ["Use sum()"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 139, "language": "python", "title": "Python Find Max", "description": "Find the maximum value in a list.", "examples": { "output": "9" }, "notes": ["Use max()"], "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 140, "language": "python", "title": "Python Count Vowels", "description": "Count the number of vowels in a string.", "examples": { "output": "3" }, "notes": ["Ignore case"], "testCases": [ { "input": "Hello", "expectedOutput": "2" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 141, "language": "python", "title": "Python Remove Spaces", "description": "Remove all spaces from a string.", "examples": { "output": "HelloWorld" }, "notes": ["Use replace()"], "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 142, "language": "python", "title": "Python List Sort", "description": "Sort a list of integers in ascending order.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use sorted()"], "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 143, "language": "python", "title": "Python Character Frequency", "description": "Count frequency of each character in a string.", "examples": { "output": "a:2 b:1" }, "notes": ["Use dict"], "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 144, "language": "python", "title": "Python Leap Year", "description": "Check if a year is a leap year.", "examples": { "output": "True" }, "notes": ["Use modulo"], "testCases": [ { "input": "2020", "expectedOutput": "True" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 145, "language": "python", "title": "Python Sum Digits", "description": "Sum all digits of a number.", "examples": { "output": "6" }, "notes": ["Use loop"], "testCases": [ { "input": "123", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 146, "language": "python", "title": "Python Remove Duplicates", "description": "Remove duplicate elements from a list.", "examples": { "output": "1 2 3" }, "notes": ["Use set"], "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 147, "language": "python", "title": "Python Reverse List", "description": "Reverse a list of integers.", "examples": { "output": "5 4 3 2 1" }, "notes": ["Use slicing"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 148, "language": "python", "title": "Python Sum Even Numbers", "description": "Sum all even numbers in a list.", "examples": { "output": "6" }, "notes": ["Use modulo"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Python", "points": 10 }
            ,{
                "id": 120,
                "language": "java",
                "title": "Intermediate: Matrix Transpose",
                "description": "Write a Java method to transpose a 2D matrix.",
                "examples": { "output": "[[1,4],[2,5],[3,6]]" },
                "notes": ["Return a new transposed matrix"],
                "testCases": [ { "input": "[[1,2,3],[4,5,6]]", "expectedOutput": "[[1,4],[2,5],[3,6]]" } ],
                "difficulty": "intermediate",
                "category": "Java",
                "points": 20
            },
            {
                "id": 121,
                "language": "java",
                "title": "Advanced: Threaded Counter",
                "description": "Create a Java class that starts two threads, each incrementing a shared counter 1000 times.",
                "examples": { "output": "2000" },
                "notes": ["Use synchronization"],
                "testCases": [ { "input": "", "expectedOutput": "2000" } ],
                "difficulty": "advanced",
                "category": "Java",
                "points": 30
            },
            {
                "id": 122,
                "language": "java",
                "title": "Expert: Dijkstra's Algorithm",
                "description": "Implement Dijkstra's shortest path algorithm for a weighted graph in Java.",
                "examples": { "output": "Shortest path: 7" },
                "notes": ["Return shortest path cost"],
                "testCases": [ { "input": "graph, start, end", "expectedOutput": "7" } ],
                "difficulty": "expert",
                "category": "Java",
                "points": 40
            },
                {
                    "id": 123,
                    "language": "java",
                    "title": "Expert: Regex Email Validator",
                    "description": "Write a Java method that uses regex to validate email addresses.",
                    "examples": { "output": "true" },
                    "notes": ["Use Pattern and Matcher"],
                    "testCases": [ { "input": "test@example.com", "expectedOutput": "true" }, { "input": "bad-email", "expectedOutput": "false" } ],
                    "difficulty": "expert",
                    "category": "Java",
                    "points": 40
                },
                {
                    "id": 204,
                    "language": "python",
                    "title": "Expert: Decorator Logger",
                    "description": "Write a Python decorator that logs function calls and arguments.",
                    "examples": { "output": "Calling foo(1, 2)" },
                    "notes": ["Use functools.wraps"],
                    "testCases": [ { "input": "foo(1,2)", "expectedOutput": "Calling foo(1, 2)" } ],
                    "difficulty": "expert",
                    "category": "Python",
                    "points": 40
                },
                {
                    "id": 205,
                    "language": "python",
                    "title": "Expert: Async Web Scraper",
                    "description": "Write an async Python function that scrapes multiple URLs in parallel and returns their titles.",
                    "examples": { "output": "['Title1', 'Title2']" },
                    "notes": ["Use aiohttp and asyncio"],
                    "testCases": [ { "input": "['https://a.com', 'https://b.com']", "expectedOutput": "['Title1', 'Title2']" } ],
                    "difficulty": "expert",
                    "category": "Python",
                    "points": 40
                },
            {
                "id": 201,
                "language": "python",
                "title": "Intermediate: Dictionary Merge",
                "description": "Write a function merge_dicts(d1, d2) that merges two dictionaries, summing values for duplicate keys.",
                "examples": { "output": "{'a': 3, 'b': 5, 'c': 4}" },
                "notes": ["If a key exists in both, sum their values"],
                "testCases": [ { "input": "{'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c': 4}", "expectedOutput": "{'a': 3, 'b': 5, 'c': 4}" } ],
                "difficulty": "intermediate",
                "category": "Python",
                "points": 20
            },
            {
                "id": 202,
                "language": "python",
                "title": "Advanced: Sudoku Validator",
                "description": "Write a function is_valid_sudoku(board) that checks if a 9x9 Sudoku board is valid.",
                "examples": { "output": "True" },
                "notes": ["Check rows, columns, and 3x3 subgrids"],
                "testCases": [ { "input": "[[5,3,4,...]]", "expectedOutput": "True" } ],
                "difficulty": "advanced",
                "category": "Python",
                "points": 30
            },
            {
                "id": 203,
                "language": "python",
                "title": "Expert: LRU Cache",
                "description": "Implement an LRU (Least Recently Used) cache class with get and put methods.",
                "examples": { "output": "get(2) -> -1" },
                "notes": ["Use OrderedDict or custom logic"],
                "testCases": [ { "input": "put(1,1), put(2,2), get(1), put(3,3), get(2)", "expectedOutput": "-1" } ],
                "difficulty": "expert",
                "category": "Python",
                "points": 40
            },
            {
                "id": 301,
                "language": "javascript",
                "title": "JavaScript Hello World",
                "description": "Write a JavaScript program that prints 'Hello, World!' to the console.",
                "examples": { "output": "Hello, World!" },
                "notes": ["Use console.log()"],
                "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 302,
                "language": "javascript",
                "title": "JavaScript Even Numbers",
                "description": "Print all even numbers from 2 to 100 in JavaScript.",
                "examples": { "output": "2\n4\n6\n8\n10\n...\n98\n100" },
                "notes": ["Use for loop and console.log()"],
                "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 303,
                "language": "javascript",
                "title": "JavaScript Swap Variables",
                "description": "Swap two variables without using a third variable in JavaScript.",
                "examples": { "output": "After swap: a = 20, b = 10" },
                "notes": ["Use destructuring assignment"],
                "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 304,
                "language": "javascript",
                "title": "JavaScript Prime Checker",
                "description": "Write a JavaScript function isPrime(n) that returns true if n is prime.",
                "examples": { "output": "true\nfalse" },
                "notes": ["Return true for prime numbers, false otherwise"],
                "testCases": [ { "input": "17", "expectedOutput": "true" }, { "input": "4", "expectedOutput": "false" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 305,
                "language": "javascript",
                "title": "JavaScript Factorial",
                "description": "Write a JavaScript function to calculate the factorial of a number.",
                "examples": { "output": "120" },
                "notes": ["Use recursion or loop"],
                "testCases": [ { "input": "5", "expectedOutput": "120" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 306,
                "language": "javascript",
                "title": "JavaScript Fibonacci",
                "description": "Print the first N Fibonacci numbers.",
                "examples": { "output": "0 1 1 2 3" },
                "notes": ["Use loop or recursion"],
                "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 307,
                "language": "javascript",
                "title": "JavaScript Reverse String",
                "description": "Reverse a given string in JavaScript.",
                "examples": { "output": "cba" },
                "notes": ["Use split(), reverse(), join()"],
                "testCases": [ { "input": "abc", "expectedOutput": "cba" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 308,
                "language": "javascript",
                "title": "JavaScript Palindrome Checker",
                "description": "Check if a string is a palindrome.",
                "examples": { "output": "true" },
                "notes": ["Ignore case"],
                "testCases": [ { "input": "Madam", "expectedOutput": "true" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 309,
                "language": "javascript",
                "title": "JavaScript Sum Array",
                "description": "Sum all elements in an array.",
                "examples": { "output": "15" },
                "notes": ["Use reduce() or for loop"],
                "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 310,
                "language": "javascript",
                "title": "JavaScript Find Max",
                "description": "Find the maximum value in an array.",
                "examples": { "output": "9" },
                "notes": ["Use Math.max() or for loop"],
                "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 311,
                "language": "javascript",
                "title": "JavaScript Count Vowels",
                "description": "Count the number of vowels in a string.",
                "examples": { "output": "2" },
                "notes": ["Ignore case"],
                "testCases": [ { "input": "Hello", "expectedOutput": "2" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 312,
                "language": "javascript",
                "title": "JavaScript Remove Spaces",
                "description": "Remove all spaces from a string.",
                "examples": { "output": "HelloWorld" },
                "notes": ["Use replace() with regex"],
                "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 313,
                "language": "javascript",
                "title": "JavaScript Array Sort",
                "description": "Sort an array of integers in ascending order.",
                "examples": { "output": "1 2 3 4 5" },
                "notes": ["Use sort() with compare function"],
                "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 314,
                "language": "javascript",
                "title": "JavaScript Character Frequency",
                "description": "Count frequency of each character in a string.",
                "examples": { "output": "a:2 b:1" },
                "notes": ["Use object or Map"],
                "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 315,
                "language": "javascript",
                "title": "JavaScript Leap Year",
                "description": "Check if a year is a leap year.",
                "examples": { "output": "true" },
                "notes": ["Use modulo operator"],
                "testCases": [ { "input": "2020", "expectedOutput": "true" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 316,
                "language": "javascript",
                "title": "JavaScript Sum Digits",
                "description": "Sum all digits of a number.",
                "examples": { "output": "6" },
                "notes": ["Convert to string and iterate"],
                "testCases": [ { "input": "123", "expectedOutput": "6" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 317,
                "language": "javascript",
                "title": "JavaScript Remove Duplicates",
                "description": "Remove duplicate elements from an array.",
                "examples": { "output": "1 2 3" },
                "notes": ["Use Set or filter"],
                "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 318,
                "language": "javascript",
                "title": "JavaScript Reverse Array",
                "description": "Reverse an array of integers.",
                "examples": { "output": "5 4 3 2 1" },
                "notes": ["Use reverse() method"],
                "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 319,
                "language": "javascript",
                "title": "JavaScript Sum Even Numbers",
                "description": "Sum all even numbers in an array.",
                "examples": { "output": "6" },
                "notes": ["Use filter and reduce"],
                "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ],
                "difficulty": "beginner",
                "category": "JavaScript",
                "points": 10
            },
            {
                "id": 320,
                "language": "javascript",
                "title": "Intermediate: Object Deep Clone",
                "description": "Write a function to deep clone a JavaScript object.",
                "examples": { "output": "{a: 1, b: {c: 2}}" },
                "notes": ["Handle nested objects and arrays"],
                "testCases": [ { "input": "{a: 1, b: {c: 2}}", "expectedOutput": "{a: 1, b: {c: 2}}" } ],
                "difficulty": "intermediate",
                "category": "JavaScript",
                "points": 20
            },
            {
                "id": 321,
                "language": "javascript",
                "title": "Advanced: Promise Chain",
                "description": "Create a function that chains multiple async operations using Promises.",
                "examples": { "output": "Final result: 15" },
                "notes": ["Use Promise.then() chaining"],
                "testCases": [ { "input": "[1,2,3]", "expectedOutput": "Final result: 15" } ],
                "difficulty": "advanced",
                "category": "JavaScript",
                "points": 30
            },
            {
                "id": 322,
                "language": "javascript",
                "title": "Expert: Custom Event Emitter",
                "description": "Implement a custom EventEmitter class with on, emit, and off methods.",
                "examples": { "output": "Event fired: data" },
                "notes": ["Handle multiple listeners per event"],
                "testCases": [ { "input": "emit('test', 'data')", "expectedOutput": "Event fired: data" } ],
                "difficulty": "expert",
                "category": "JavaScript",
                "points": 40
            },
            {
                "id": 401,
                "language": "c",
                "title": "C Hello World",
                "description": "Write a C program that prints 'Hello, World!' to the console.",
                "examples": { "output": "Hello, World!" },
                "notes": ["Use printf()", "Include stdio.h"],
                "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 449,
                "language": "c",
                "title": "C Add Two Numbers",
                "description": "Write a C program to add two numbers: 5 + 3.",
                "examples": { "output": "8" },
                "notes": ["Use arithmetic operator +"],
                "testCases": [ { "input": "", "expectedOutput": "8" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 450,
                "language": "c",
                "title": "C Add Two Input Numbers",
                "description": "Take two numbers as input and print their sum.",
                "examples": { "output": "Sum: 8" },
                "notes": ["Use scanf() and printf()"],
                "testCases": [ { "input": "5\n3", "expectedOutput": "Sum: 8" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 451,
                "language": "c",
                "title": "C Compare Two Numbers",
                "description": "Input 2 int numbers a and b. Print 1 if a >= b, else print 0.",
                "examples": { "output": "1" },
                "notes": ["Use >= operator"],
                "testCases": [ { "input": "5\n3", "expectedOutput": "1" }, { "input": "2\n7", "expectedOutput": "0" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 452,
                "language": "c",
                "title": "C Average of Two Floats",
                "description": "Input 2 floating point numbers and print their average.",
                "examples": { "output": "4.5" },
                "notes": ["Use float and division"],
                "testCases": [ { "input": "3.5\n5.5", "expectedOutput": "4.5" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 453,
                "language": "c",
                "title": "C Square Area",
                "description": "Input side of a square and print its area.",
                "examples": { "output": "25" },
                "notes": ["Area = side * side"],
                "testCases": [ { "input": "5", "expectedOutput": "25" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 402,
                "language": "c",
                "title": "C Even Numbers",
                "description": "Print all even numbers from 2 to 100 in C.",
                "examples": { "output": "2\n4\n6\n8\n10\n...\n98\n100" },
                "notes": ["Use for loop", "Use printf()"],
                "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            { "id": 454, "language": "c", "title": "C Print Odd Numbers", "description": "Print all odd numbers from 1 to 99.", "examples": { "output": "1\n3\n5\n7\n9\n...\n97\n99" }, "notes": ["Use for loop", "Print each number on new line"], "testCases": [ { "input": "", "expectedOutput": "1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55\n57\n59\n61\n63\n65\n67\n69\n71\n73\n75\n77\n79\n81\n83\n85\n87\n89\n91\n93\n95\n97\n99" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 455, "language": "c", "title": "C Maximum of Three Numbers", "description": "Take three integers and print the largest one.", "examples": { "output": "15" }, "notes": ["Use if-else statements"], "testCases": [ { "input": "10\n15\n8", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 456, "language": "c", "title": "C Simple Interest", "description": "Take principal, rate, and time. Calculate and print simple interest.", "examples": { "output": "600" }, "notes": ["Formula: SI = (P * R * T) / 100"], "testCases": [ { "input": "1000\n6\n10", "expectedOutput": "600" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 457, "language": "c", "title": "C Temperature Converter", "description": "Convert temperature from Celsius to Fahrenheit.", "examples": { "output": "98.6" }, "notes": ["Formula: F = (C * 9/5) + 32"], "testCases": [ { "input": "37", "expectedOutput": "98.6" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 458, "language": "c", "title": "C Leap Year Checker", "description": "Take a year and check if it's a leap year.", "examples": { "output": "1" }, "notes": ["Return 1 for leap year, 0 otherwise"], "testCases": [ { "input": "2020", "expectedOutput": "1" }, { "input": "2021", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 459, "language": "c", "title": "C Sum of Natural Numbers", "description": "Calculate sum of first N natural numbers.", "examples": { "output": "15" }, "notes": ["Sum = 1+2+3+...+N"], "testCases": [ { "input": "5", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            {
                "id": 403,
                "language": "c",
                "title": "C Swap Two Numbers",
                "description": "Swap two numbers without using a third variable in C.",
                "examples": { "output": "After swap: a = 20, b = 10" },
                "notes": ["Use arithmetic operations", "Don't use temp variable"],
                "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 404,
                "language": "c",
                "title": "C Prime Number Checker",
                "description": "Write a C function isPrime(int n) that returns 1 if n is prime, 0 otherwise.",
                "examples": { "output": "1\n0" },
                "notes": ["Return 1 for prime, 0 for non-prime", "Handle up to 1000"],
                "testCases": [ { "input": "17", "expectedOutput": "1" }, { "input": "4", "expectedOutput": "0" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 405,
                "language": "c",
                "title": "C Factorial",
                "description": "Write a C function to calculate the factorial of a number.",
                "examples": { "output": "120" },
                "notes": ["Use recursion or loop", "Handle integer overflow"],
                "testCases": [ { "input": "5", "expectedOutput": "120" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 406,
                "language": "c",
                "title": "C Fibonacci",
                "description": "Print the first N Fibonacci numbers.",
                "examples": { "output": "0 1 1 2 3" },
                "notes": ["Use loop or recursion", "Space-separated output"],
                "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 407,
                "language": "c",
                "title": "C Reverse String",
                "description": "Reverse a given string in C.",
                "examples": { "output": "cba" },
                "notes": ["Use string manipulation", "Include string.h"],
                "testCases": [ { "input": "abc", "expectedOutput": "cba" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 408,
                "language": "c",
                "title": "C Palindrome Checker",
                "description": "Check if a string is a palindrome.",
                "examples": { "output": "1" },
                "notes": ["Ignore case", "Return 1 for true, 0 for false"],
                "testCases": [ { "input": "Madam", "expectedOutput": "1" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 409,
                "language": "c",
                "title": "C Sum Array",
                "description": "Sum all elements in an integer array.",
                "examples": { "output": "15" },
                "notes": ["Use for loop", "Array size given"],
                "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 410,
                "language": "c",
                "title": "C Find Max",
                "description": "Find the maximum value in an array.",
                "examples": { "output": "9" },
                "notes": ["Use for loop", "Array size given"],
                "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 411,
                "language": "c",
                "title": "C Count Vowels",
                "description": "Count the number of vowels in a string.",
                "examples": { "output": "2" },
                "notes": ["Ignore case", "Check a,e,i,o,u"],
                "testCases": [ { "input": "Hello", "expectedOutput": "2" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 412,
                "language": "c",
                "title": "C Remove Spaces",
                "description": "Remove all spaces from a string.",
                "examples": { "output": "HelloWorld" },
                "notes": ["Use string manipulation", "Modify in-place or create new"],
                "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 413,
                "language": "c",
                "title": "C Array Sort",
                "description": "Sort an array of integers in ascending order.",
                "examples": { "output": "1 2 3 4 5" },
                "notes": ["Use bubble sort or qsort", "Space-separated output"],
                "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 414,
                "language": "c",
                "title": "C Character Frequency",
                "description": "Count frequency of each character in a string.",
                "examples": { "output": "a:2 b:1" },
                "notes": ["Use array for counting", "ASCII values"],
                "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 415,
                "language": "c",
                "title": "C Leap Year",
                "description": "Check if a year is a leap year.",
                "examples": { "output": "1" },
                "notes": ["Use modulo operator", "Return 1 for true, 0 for false"],
                "testCases": [ { "input": "2020", "expectedOutput": "1" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 416,
                "language": "c",
                "title": "C Sum Digits",
                "description": "Sum all digits of a number.",
                "examples": { "output": "6" },
                "notes": ["Use modulo and division", "Handle positive integers"],
                "testCases": [ { "input": "123", "expectedOutput": "6" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 417,
                "language": "c",
                "title": "C Remove Duplicates",
                "description": "Remove duplicate elements from an array.",
                "examples": { "output": "1 2 3" },
                "notes": ["Maintain order", "Space-separated output"],
                "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 418,
                "language": "c",
                "title": "C Reverse Array",
                "description": "Reverse an array of integers.",
                "examples": { "output": "5 4 3 2 1" },
                "notes": ["Use two pointers", "Space-separated output"],
                "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 419,
                "language": "c",
                "title": "C Sum Even Numbers",
                "description": "Sum all even numbers in an array.",
                "examples": { "output": "6" },
                "notes": ["Use modulo operator", "Check for even numbers"],
                "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ],
                "difficulty": "beginner",
                "category": "C",
                "points": 10
            },
            {
                "id": 420,
                "language": "c",
                "title": "Intermediate: Matrix Multiplication",
                "description": "Write a C program to multiply two matrices.",
                "examples": { "output": "[[19,22],[43,50]]" },
                "notes": ["Handle 2x2 matrices", "Use nested loops"],
                "testCases": [ { "input": "[[1,2],[3,4]] [[5,6],[7,8]]", "expectedOutput": "[[19,22],[43,50]]" } ],
                "difficulty": "intermediate",
                "category": "C",
                "points": 20
            },
            {
                "id": 421,
                "language": "c",
                "title": "Advanced: Binary Search Tree",
                "description": "Implement a binary search tree with insert and search operations.",
                "examples": { "output": "Found: 1" },
                "notes": ["Use struct for nodes", "Handle memory allocation"],
                "testCases": [ { "input": "insert 5,3,7,1 search 1", "expectedOutput": "Found: 1" } ],
                "difficulty": "advanced",
                "category": "C",
                "points": 30
            },
            {
                "id": 422,
                "language": "c",
                "title": "Expert: Memory Pool Allocator",
                "description": "Implement a custom memory pool allocator in C.",
                "examples": { "output": "Allocated: 0x1000" },
                "notes": ["Use malloc/free", "Handle fragmentation"],
                "testCases": [ { "input": "alloc 100", "expectedOutput": "Allocated: 0x1000" } ],
                "difficulty": "expert",
                "category": "C",
                "points": 40
            },
            { "id": 423, "language": "c", "title": "C GCD Calculator", "description": "Find the Greatest Common Divisor of two numbers.", "examples": { "output": "6" }, "notes": ["Use Euclidean algorithm"], "testCases": [ { "input": "48 18", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 424, "language": "c", "title": "C LCM Calculator", "description": "Find the Least Common Multiple of two numbers.", "examples": { "output": "144" }, "notes": ["Use GCD formula"], "testCases": [ { "input": "48 18", "expectedOutput": "144" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 425, "language": "c", "title": "C Armstrong Number", "description": "Check if a number is an Armstrong number.", "examples": { "output": "1" }, "notes": ["Sum of cubes equals original"], "testCases": [ { "input": "153", "expectedOutput": "1" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 426, "language": "c", "title": "C Perfect Number", "description": "Check if a number is a perfect number.", "examples": { "output": "1" }, "notes": ["Sum of divisors equals number"], "testCases": [ { "input": "6", "expectedOutput": "1" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 427, "language": "c", "title": "C Binary to Decimal", "description": "Convert a binary number to decimal.", "examples": { "output": "10" }, "notes": ["Use string input"], "testCases": [ { "input": "1010", "expectedOutput": "10" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 428, "language": "c", "title": "C Decimal to Binary", "description": "Convert a decimal number to binary.", "examples": { "output": "1010" }, "notes": ["Use division by 2"], "testCases": [ { "input": "10", "expectedOutput": "1010" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 429, "language": "c", "title": "C String Length", "description": "Calculate string length without strlen().", "examples": { "output": "5" }, "notes": ["Count characters manually"], "testCases": [ { "input": "Hello", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 430, "language": "c", "title": "C String Copy", "description": "Copy string without strcpy().", "examples": { "output": "Hello" }, "notes": ["Character by character copy"], "testCases": [ { "input": "Hello", "expectedOutput": "Hello" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 431, "language": "c", "title": "C String Compare", "description": "Compare strings without strcmp().", "examples": { "output": "0" }, "notes": ["Return 0 if equal"], "testCases": [ { "input": "abc abc", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 432, "language": "c", "title": "C Matrix Addition", "description": "Add two matrices.", "examples": { "output": "[[6,8],[10,12]]" }, "notes": ["Element-wise addition"], "testCases": [ { "input": "[[1,2],[3,4]] [[5,6],[7,8]]", "expectedOutput": "[[6,8],[10,12]]" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 433, "language": "c", "title": "C Matrix Transpose", "description": "Transpose a matrix.", "examples": { "output": "[[1,4],[2,5],[3,6]]" }, "notes": ["Swap rows and columns"], "testCases": [ { "input": "[[1,2,3],[4,5,6]]", "expectedOutput": "[[1,4],[2,5],[3,6]]" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 434, "language": "c", "title": "C Bubble Sort", "description": "Implement bubble sort algorithm.", "examples": { "output": "1 2 5 8 9" }, "notes": ["Compare adjacent elements"], "testCases": [ { "input": "[5,2,8,1,9]", "expectedOutput": "1 2 5 8 9" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 435, "language": "c", "title": "C Selection Sort", "description": "Implement selection sort algorithm.", "examples": { "output": "11 12 22 25 64" }, "notes": ["Find minimum element"], "testCases": [ { "input": "[64,25,12,22,11]", "expectedOutput": "11 12 22 25 64" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 436, "language": "c", "title": "C Insertion Sort", "description": "Implement insertion sort algorithm.", "examples": { "output": "5 6 11 12 13" }, "notes": ["Insert in sorted position"], "testCases": [ { "input": "[12,11,13,5,6]", "expectedOutput": "5 6 11 12 13" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 437, "language": "c", "title": "C Linear Search", "description": "Search element using linear search.", "examples": { "output": "2" }, "notes": ["Return index if found"], "testCases": [ { "input": "[2,3,4,10,40] 4", "expectedOutput": "2" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 438, "language": "c", "title": "C Binary Search", "description": "Search in sorted array using binary search.", "examples": { "output": "2" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[2,3,4,10,40] 4", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 439, "language": "c", "title": "C Linked List Insert", "description": "Insert node at beginning of linked list.", "examples": { "output": "1 -> 2 -> 3" }, "notes": ["Use struct for nodes"], "testCases": [ { "input": "insert 1,2,3", "expectedOutput": "1 -> 2 -> 3" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 440, "language": "c", "title": "C Stack Implementation", "description": "Implement stack with push/pop operations.", "examples": { "output": "Popped: 3" }, "notes": ["Use array and top pointer"], "testCases": [ { "input": "push 1,2,3 pop", "expectedOutput": "Popped: 3" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 441, "language": "c", "title": "C Queue Implementation", "description": "Implement queue with enqueue/dequeue.", "examples": { "output": "Dequeued: 1" }, "notes": ["Use front and rear pointers"], "testCases": [ { "input": "enqueue 1,2,3 dequeue", "expectedOutput": "Dequeued: 1" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 442, "language": "c", "title": "C Recursive Factorial", "description": "Calculate factorial using recursion only.", "examples": { "output": "120" }, "notes": ["Must use recursion"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 443, "language": "c", "title": "C Tower of Hanoi", "description": "Solve Tower of Hanoi using recursion.", "examples": { "output": "Move disk 1 from A to C" }, "notes": ["Use recursion"], "testCases": [ { "input": "2", "expectedOutput": "Move disk 1 from A to B" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 444, "language": "c", "title": "C File Operations", "description": "Read from file and write to another.", "examples": { "output": "File copied" }, "notes": ["Use fopen, fread, fwrite"], "testCases": [ { "input": "input.txt", "expectedOutput": "File copied" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 445, "language": "c", "title": "C Pointer Arithmetic", "description": "Reverse array using pointer arithmetic.", "examples": { "output": "5 4 3 2 1" }, "notes": ["Use pointers only"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ], "difficulty": "advanced", "category": "C", "points": 30 },
            { "id": 446, "language": "c", "title": "Expert: Hash Table", "description": "Implement hash table with collision handling.", "examples": { "output": "Found: value" }, "notes": ["Handle collisions"], "testCases": [ { "input": "insert key,value", "expectedOutput": "Found: value" } ], "difficulty": "expert", "category": "C", "points": 40 },
            { "id": 447, "language": "c", "title": "Expert: Quick Sort", "description": "Implement quicksort with partitioning.", "examples": { "output": "1 1 2 3 6 8 10" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[3,6,8,10,1,2,1]", "expectedOutput": "1 1 2 3 6 8 10" } ], "difficulty": "expert", "category": "C", "points": 40 },
            { "id": 448, "language": "c", "title": "Expert: Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "5 6 7 11 12 13" }, "notes": ["Merge sorted subarrays"], "testCases": [ { "input": "[12,11,13,5,6,7]", "expectedOutput": "5 6 7 11 12 13" } ], "difficulty": "expert", "category": "C", "points": 40 },
            { "id": 501, "language": "cpp", "title": "C++ Hello World", "description": "Write a C++ program that prints 'Hello, World!' to console.", "examples": { "output": "Hello, World!" }, "notes": ["Use cout", "Include iostream"], "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 529, "language": "cpp", "title": "C++ Add Two Numbers", "description": "Write a C++ program to add two numbers: 5 + 3.", "examples": { "output": "8" }, "notes": ["Use arithmetic operator +"], "testCases": [ { "input": "", "expectedOutput": "8" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 530, "language": "cpp", "title": "C++ Add Two Input Numbers", "description": "Take two numbers as input and print their sum.", "examples": { "output": "Sum: 8" }, "notes": ["Use cin and cout"], "testCases": [ { "input": "5 3", "expectedOutput": "Sum: 8" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 531, "language": "cpp", "title": "C++ Compare Two Numbers", "description": "Input 2 int numbers a and b. Print 1 if a >= b, else print 0.", "examples": { "output": "1" }, "notes": ["Use >= operator"], "testCases": [ { "input": "5 3", "expectedOutput": "1" }, { "input": "2 7", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 532, "language": "cpp", "title": "C++ Average of Two Floats", "description": "Input 2 floating point numbers and print their average.", "examples": { "output": "4.5" }, "notes": ["Use float and division"], "testCases": [ { "input": "3.5 5.5", "expectedOutput": "4.5" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 533, "language": "cpp", "title": "C++ Square Area", "description": "Input side of a square and print its area.", "examples": { "output": "25" }, "notes": ["Area = side * side"], "testCases": [ { "input": "5", "expectedOutput": "25" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 502, "language": "cpp", "title": "C++ Even Numbers", "description": "Print even numbers from 2 to 100.", "examples": { "output": "2\n4\n6\n8\n10\n...\n98\n100" }, "notes": ["Use for loop"], "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n30\n32\n34\n36\n38\n40\n42\n44\n46\n48\n50\n52\n54\n56\n58\n60\n62\n64\n66\n68\n70\n72\n74\n76\n78\n80\n82\n84\n86\n88\n90\n92\n94\n96\n98\n100" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 534, "language": "cpp", "title": "C++ Print Odd Numbers", "description": "Print all odd numbers from 1 to 99.", "examples": { "output": "1\n3\n5\n7\n9\n...\n97\n99" }, "notes": ["Use for loop", "Use cout"], "testCases": [ { "input": "", "expectedOutput": "1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55\n57\n59\n61\n63\n65\n67\n69\n71\n73\n75\n77\n79\n81\n83\n85\n87\n89\n91\n93\n95\n97\n99" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 535, "language": "cpp", "title": "C++ Maximum of Three Numbers", "description": "Take three integers and print the largest one.", "examples": { "output": "15" }, "notes": ["Use if-else or max function"], "testCases": [ { "input": "10 15 8", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 536, "language": "cpp", "title": "C++ Simple Interest", "description": "Take principal, rate, and time. Calculate and print simple interest.", "examples": { "output": "600" }, "notes": ["Formula: SI = (P * R * T) / 100"], "testCases": [ { "input": "1000 6 10", "expectedOutput": "600" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 537, "language": "cpp", "title": "C++ Temperature Converter", "description": "Convert temperature from Celsius to Fahrenheit.", "examples": { "output": "98.6" }, "notes": ["Formula: F = (C * 9.0/5) + 32"], "testCases": [ { "input": "37", "expectedOutput": "98.6" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 538, "language": "cpp", "title": "C++ Leap Year Checker", "description": "Take a year and check if it's a leap year.", "examples": { "output": "true" }, "notes": ["Return true for leap year, false otherwise"], "testCases": [ { "input": "2020", "expectedOutput": "true" }, { "input": "2021", "expectedOutput": "false" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 539, "language": "cpp", "title": "C++ Sum of Natural Numbers", "description": "Calculate sum of first N natural numbers.", "examples": { "output": "15" }, "notes": ["Sum = 1+2+3+...+N"], "testCases": [ { "input": "5", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 503, "language": "cpp", "title": "C++ Swap Variables", "description": "Swap two variables using references.", "examples": { "output": "After swap: a = 20, b = 10" }, "notes": ["Use references"], "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 504, "language": "cpp", "title": "C++ Prime Checker", "description": "Check if number is prime using function.", "examples": { "output": "true" }, "notes": ["Return bool"], "testCases": [ { "input": "17", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 505, "language": "cpp", "title": "C++ Factorial", "description": "Calculate factorial using function.", "examples": { "output": "120" }, "notes": ["Use recursion or loop"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 506, "language": "cpp", "title": "C++ Vector Sum", "description": "Sum all elements in a vector.", "examples": { "output": "15" }, "notes": ["Use vector container"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 507, "language": "cpp", "title": "C++ String Reverse", "description": "Reverse string using STL.", "examples": { "output": "cba" }, "notes": ["Use string class"], "testCases": [ { "input": "abc", "expectedOutput": "cba" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 508, "language": "cpp", "title": "C++ Class Rectangle", "description": "Create Rectangle class with area method.", "examples": { "output": "20" }, "notes": ["Use class and methods"], "testCases": [ { "input": "4 5", "expectedOutput": "20" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 509, "language": "cpp", "title": "C++ Function Overloading", "description": "Overload add function for int and double.", "examples": { "output": "7\n7.5" }, "notes": ["Multiple function definitions"], "testCases": [ { "input": "3 4\n3.5 4.0", "expectedOutput": "7\n7.5" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 510, "language": "cpp", "title": "C++ Array Sort STL", "description": "Sort array using STL sort.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use std::sort"], "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 511, "language": "cpp", "title": "C++ Constructor/Destructor", "description": "Create class with constructor and destructor.", "examples": { "output": "Created\nDestroyed" }, "notes": ["Show object lifecycle"], "testCases": [ { "input": "", "expectedOutput": "Created\nDestroyed" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 512, "language": "cpp", "title": "C++ Inheritance", "description": "Create base and derived class.", "examples": { "output": "Base method\nDerived method" }, "notes": ["Use public inheritance"], "testCases": [ { "input": "", "expectedOutput": "Base method\nDerived method" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 513, "language": "cpp", "title": "C++ Virtual Functions", "description": "Implement virtual function polymorphism.", "examples": { "output": "Derived implementation" }, "notes": ["Use virtual keyword"], "testCases": [ { "input": "", "expectedOutput": "Derived implementation" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 514, "language": "cpp", "title": "C++ Operator Overloading", "description": "Overload + operator for custom class.", "examples": { "output": "Result: 7" }, "notes": ["Overload arithmetic operator"], "testCases": [ { "input": "3 4", "expectedOutput": "Result: 7" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 515, "language": "cpp", "title": "C++ Template Function", "description": "Create template function for max of two values.", "examples": { "output": "5\n3.7" }, "notes": ["Use template keyword"], "testCases": [ { "input": "3 5\n2.1 3.7", "expectedOutput": "5\n3.7" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 516, "language": "cpp", "title": "C++ STL Vector Operations", "description": "Use vector push_back, pop_back, size.", "examples": { "output": "Size: 2" }, "notes": ["Use vector methods"], "testCases": [ { "input": "push 1,2,3 pop", "expectedOutput": "Size: 2" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 517, "language": "cpp", "title": "C++ STL Map", "description": "Use map to count character frequency.", "examples": { "output": "a:2 b:1" }, "notes": ["Use std::map"], "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 518, "language": "cpp", "title": "C++ Exception Handling", "description": "Handle division by zero using try-catch.", "examples": { "output": "Error: Division by zero" }, "notes": ["Use try-catch blocks"], "testCases": [ { "input": "10 0", "expectedOutput": "Error: Division by zero" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 519, "language": "cpp", "title": "C++ File I/O", "description": "Read from file and write to another using fstream.", "examples": { "output": "File copied" }, "notes": ["Use ifstream/ofstream"], "testCases": [ { "input": "input.txt", "expectedOutput": "File copied" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 520, "language": "cpp", "title": "C++ Smart Pointers", "description": "Use unique_ptr for memory management.", "examples": { "output": "Value: 42" }, "notes": ["Use std::unique_ptr"], "testCases": [ { "input": "42", "expectedOutput": "Value: 42" } ], "difficulty": "advanced", "category": "C++", "points": 30 },
            { "id": 521, "language": "cpp", "title": "C++ Lambda Functions", "description": "Use lambda with STL algorithms.", "examples": { "output": "6 8 10" }, "notes": ["Use lambda expressions"], "testCases": [ { "input": "[3,4,5]", "expectedOutput": "6 8 10" } ], "difficulty": "advanced", "category": "C++", "points": 30 },
            { "id": 522, "language": "cpp", "title": "C++ Move Semantics", "description": "Implement move constructor and assignment.", "examples": { "output": "Moved successfully" }, "notes": ["Use std::move"], "testCases": [ { "input": "", "expectedOutput": "Moved successfully" } ], "difficulty": "advanced", "category": "C++", "points": 30 },
            { "id": 523, "language": "cpp", "title": "C++ Thread Programming", "description": "Create multiple threads using std::thread.", "examples": { "output": "Thread 1 complete" }, "notes": ["Use std::thread"], "testCases": [ { "input": "2", "expectedOutput": "Thread 1 complete" } ], "difficulty": "advanced", "category": "C++", "points": 30 },
            { "id": 524, "language": "cpp", "title": "C++ Template Class", "description": "Create template class for Stack.", "examples": { "output": "Popped: 3" }, "notes": ["Use class templates"], "testCases": [ { "input": "push 1,2,3 pop", "expectedOutput": "Popped: 3" } ], "difficulty": "advanced", "category": "C++", "points": 30 },
            { "id": 525, "language": "cpp", "title": "Expert: Custom Iterator", "description": "Implement custom iterator for container.", "examples": { "output": "1 2 3" }, "notes": ["Implement iterator interface"], "testCases": [ { "input": "[1,2,3]", "expectedOutput": "1 2 3" } ], "difficulty": "expert", "category": "C++", "points": 40 },
            { "id": 526, "language": "cpp", "title": "Expert: RAII Pattern", "description": "Implement RAII for resource management.", "examples": { "output": "Resource acquired\nResource released" }, "notes": ["Use constructor/destructor"], "testCases": [ { "input": "", "expectedOutput": "Resource acquired\nResource released" } ], "difficulty": "expert", "category": "C++", "points": 40 },
            { "id": 527, "language": "cpp", "title": "Expert: Variadic Templates", "description": "Create variadic template function.", "examples": { "output": "Sum: 15" }, "notes": ["Use parameter packs"], "testCases": [ { "input": "1,2,3,4,5", "expectedOutput": "Sum: 15" } ], "difficulty": "expert", "category": "C++", "points": 40 },
            { "id": 528, "language": "cpp", "title": "Expert: Metaprogramming", "description": "Use SFINAE for compile-time checks.", "examples": { "output": "Is integer: true" }, "notes": ["Use std::enable_if"], "testCases": [ { "input": "42", "expectedOutput": "Is integer: true" } ], "difficulty": "expert", "category": "C++", "points": 40 },
            { "id": 600, "language": "java", "title": "Java Print Name", "description": "Take a name as input and print 'Hello, [name]!'.", "examples": { "output": "Hello, John!" }, "notes": ["Use Scanner for input"], "testCases": [ { "input": "John", "expectedOutput": "Hello, John!" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 601, "language": "java", "title": "Java Circle Area", "description": "Calculate area of circle given radius.", "examples": { "output": "78.54" }, "notes": ["Use Math.PI"], "testCases": [ { "input": "5", "expectedOutput": "78.54" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 602, "language": "java", "title": "Java Odd or Even", "description": "Check if a number is odd or even.", "examples": { "output": "Even" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "4", "expectedOutput": "Even" }, { "input": "5", "expectedOutput": "Odd" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 603, "language": "java", "title": "Java Multiplication Table", "description": "Print multiplication table of a number up to 10.", "examples": { "output": "5 x 1 = 5\n5 x 2 = 10" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 604, "language": "java", "title": "Java String Length", "description": "Find length of a string.", "examples": { "output": "5" }, "notes": ["Use .length() method"], "testCases": [ { "input": "Hello", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 605, "language": "java", "title": "Java Uppercase String", "description": "Convert string to uppercase.", "examples": { "output": "HELLO" }, "notes": ["Use .toUpperCase()"], "testCases": [ { "input": "hello", "expectedOutput": "HELLO" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 606, "language": "java", "title": "Java Count Words", "description": "Count number of words in a sentence.", "examples": { "output": "3" }, "notes": ["Use split() method"], "testCases": [ { "input": "Hello World Java", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 607, "language": "java", "title": "Java Simple Calculator", "description": "Add, subtract, multiply or divide two numbers.", "examples": { "output": "15" }, "notes": ["Use switch statement"], "testCases": [ { "input": "10 5 +", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 608, "language": "java", "title": "Java Grade Calculator", "description": "Assign grade based on marks (A>=90, B>=80, C>=70, D>=60, F<60).", "examples": { "output": "A" }, "notes": ["Use if-else statements"], "testCases": [ { "input": "95", "expectedOutput": "A" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 609, "language": "java", "title": "Java Power Calculation", "description": "Calculate power of a number.", "examples": { "output": "32" }, "notes": ["Use Math.pow() or loop"], "testCases": [ { "input": "2 5", "expectedOutput": "32" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 610, "language": "java", "title": "Java Square Root", "description": "Find square root of a number.", "examples": { "output": "5.0" }, "notes": ["Use Math.sqrt()"], "testCases": [ { "input": "25", "expectedOutput": "5.0" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 611, "language": "java", "title": "Java Absolute Value", "description": "Find absolute value of a number.", "examples": { "output": "5" }, "notes": ["Use Math.abs()"], "testCases": [ { "input": "-5", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 612, "language": "java", "title": "Java Random Number", "description": "Generate random number between 1 and 100.", "examples": { "output": "42" }, "notes": ["Use Random class"], "testCases": [ { "input": "", "expectedOutput": "42" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 613, "language": "java", "title": "Java String Contains", "description": "Check if string contains a substring.", "examples": { "output": "true" }, "notes": ["Use .contains() method"], "testCases": [ { "input": "Hello World\nWorld", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 614, "language": "java", "title": "Java Replace Characters", "description": "Replace all occurrences of a character in string.", "examples": { "output": "Hxllx" }, "notes": ["Use .replace() method"], "testCases": [ { "input": "Hello\ne\nx", "expectedOutput": "Hxllx" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 615, "language": "java", "title": "Java Array Average", "description": "Calculate average of array elements.", "examples": { "output": "3.0" }, "notes": ["Sum all elements and divide by length"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "3.0" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 616, "language": "java", "title": "Java Count Positive Numbers", "description": "Count positive numbers in an array.", "examples": { "output": "3" }, "notes": ["Use for loop and if condition"], "testCases": [ { "input": "[1,-2,3,-4,5]", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 617, "language": "java", "title": "Java Second Largest", "description": "Find second largest number in array.", "examples": { "output": "8" }, "notes": ["Sort or use two variables"], "testCases": [ { "input": "[3,7,8,2,9]", "expectedOutput": "8" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 618, "language": "java", "title": "Java Sum of Squares", "description": "Calculate sum of squares of first N numbers.", "examples": { "output": "55" }, "notes": ["Use loop and square each number"], "testCases": [ { "input": "5", "expectedOutput": "55" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 619, "language": "java", "title": "Java Reverse Number", "description": "Reverse digits of a number.", "examples": { "output": "321" }, "notes": ["Use modulo and division"], "testCases": [ { "input": "123", "expectedOutput": "321" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
            { "id": 650, "language": "python", "title": "Python Print Name", "description": "Take a name as input and print 'Hello, [name]!'.", "examples": { "output": "Hello, John!" }, "notes": ["Use input() and f-strings"], "testCases": [ { "input": "John", "expectedOutput": "Hello, John!" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 651, "language": "python", "title": "Python Circle Area", "description": "Calculate area of circle given radius.", "examples": { "output": "78.54" }, "notes": ["Use math.pi"], "testCases": [ { "input": "5", "expectedOutput": "78.54" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 652, "language": "python", "title": "Python Odd or Even", "description": "Check if a number is odd or even.", "examples": { "output": "Even" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "4", "expectedOutput": "Even" }, { "input": "5", "expectedOutput": "Odd" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 653, "language": "python", "title": "Python Multiplication Table", "description": "Print multiplication table of a number up to 10.", "examples": { "output": "5 x 1 = 5\n5 x 2 = 10" }, "notes": ["Use for loop and range"], "testCases": [ { "input": "5", "expectedOutput": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 654, "language": "python", "title": "Python String Length", "description": "Find length of a string.", "examples": { "output": "5" }, "notes": ["Use len() function"], "testCases": [ { "input": "Hello", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 655, "language": "python", "title": "Python Uppercase String", "description": "Convert string to uppercase.", "examples": { "output": "HELLO" }, "notes": ["Use .upper() method"], "testCases": [ { "input": "hello", "expectedOutput": "HELLO" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 656, "language": "python", "title": "Python Count Words", "description": "Count number of words in a sentence.", "examples": { "output": "3" }, "notes": ["Use split() method"], "testCases": [ { "input": "Hello World Python", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 657, "language": "python", "title": "Python Simple Calculator", "description": "Add, subtract, multiply or divide two numbers.", "examples": { "output": "15" }, "notes": ["Use if-elif statements"], "testCases": [ { "input": "10\n5\n+", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 658, "language": "python", "title": "Python Grade Calculator", "description": "Assign grade based on marks (A>=90, B>=80, C>=70, D>=60, F<60).", "examples": { "output": "A" }, "notes": ["Use if-elif statements"], "testCases": [ { "input": "95", "expectedOutput": "A" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 659, "language": "python", "title": "Python Power Calculation", "description": "Calculate power of a number.", "examples": { "output": "32" }, "notes": ["Use ** operator or pow()"], "testCases": [ { "input": "2\n5", "expectedOutput": "32" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 660, "language": "python", "title": "Python Square Root", "description": "Find square root of a number.", "examples": { "output": "5.0" }, "notes": ["Use math.sqrt()"], "testCases": [ { "input": "25", "expectedOutput": "5.0" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 661, "language": "python", "title": "Python Absolute Value", "description": "Find absolute value of a number.", "examples": { "output": "5" }, "notes": ["Use abs() function"], "testCases": [ { "input": "-5", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 662, "language": "python", "title": "Python Random Number", "description": "Generate random number between 1 and 100.", "examples": { "output": "42" }, "notes": ["Use random.randint()"], "testCases": [ { "input": "", "expectedOutput": "42" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 663, "language": "python", "title": "Python String Contains", "description": "Check if string contains a substring.", "examples": { "output": "True" }, "notes": ["Use 'in' operator"], "testCases": [ { "input": "Hello World\nWorld", "expectedOutput": "True" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 664, "language": "python", "title": "Python Replace Characters", "description": "Replace all occurrences of a character in string.", "examples": { "output": "Hxllx" }, "notes": ["Use .replace() method"], "testCases": [ { "input": "Hello\ne\nx", "expectedOutput": "Hxllx" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 665, "language": "python", "title": "Python List Average", "description": "Calculate average of list elements.", "examples": { "output": "3.0" }, "notes": ["Use sum() and len()"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "3.0" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 666, "language": "python", "title": "Python Count Positive Numbers", "description": "Count positive numbers in a list.", "examples": { "output": "3" }, "notes": ["Use list comprehension or loop"], "testCases": [ { "input": "[1,-2,3,-4,5]", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 667, "language": "python", "title": "Python Second Largest", "description": "Find second largest number in list.", "examples": { "output": "8" }, "notes": ["Use sorted() or manual method"], "testCases": [ { "input": "[3,7,8,2,9]", "expectedOutput": "8" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 668, "language": "python", "title": "Python Sum of Squares", "description": "Calculate sum of squares of first N numbers.", "examples": { "output": "55" }, "notes": ["Use loop or list comprehension"], "testCases": [ { "input": "5", "expectedOutput": "55" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 669, "language": "python", "title": "Python Reverse Number", "description": "Reverse digits of a number.", "examples": { "output": "321" }, "notes": ["Convert to string and reverse"], "testCases": [ { "input": "123", "expectedOutput": "321" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
            { "id": 700, "language": "javascript", "title": "JavaScript Print Name", "description": "Take a name as input and print 'Hello, [name]!'.", "examples": { "output": "Hello, John!" }, "notes": ["Use template literals"], "testCases": [ { "input": "John", "expectedOutput": "Hello, John!" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 701, "language": "javascript", "title": "JavaScript Circle Area", "description": "Calculate area of circle given radius.", "examples": { "output": "78.54" }, "notes": ["Use Math.PI"], "testCases": [ { "input": "5", "expectedOutput": "78.54" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 702, "language": "javascript", "title": "JavaScript Odd or Even", "description": "Check if a number is odd or even.", "examples": { "output": "Even" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "4", "expectedOutput": "Even" }, { "input": "5", "expectedOutput": "Odd" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 703, "language": "javascript", "title": "JavaScript Multiplication Table", "description": "Print multiplication table of a number up to 10.", "examples": { "output": "5 x 1 = 5\n5 x 2 = 10" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 704, "language": "javascript", "title": "JavaScript String Length", "description": "Find length of a string.", "examples": { "output": "5" }, "notes": ["Use .length property"], "testCases": [ { "input": "Hello", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 705, "language": "javascript", "title": "JavaScript Uppercase String", "description": "Convert string to uppercase.", "examples": { "output": "HELLO" }, "notes": ["Use .toUpperCase()"], "testCases": [ { "input": "hello", "expectedOutput": "HELLO" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 706, "language": "javascript", "title": "JavaScript Count Words", "description": "Count number of words in a sentence.", "examples": { "output": "3" }, "notes": ["Use split() method"], "testCases": [ { "input": "Hello World JavaScript", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 707, "language": "javascript", "title": "JavaScript Simple Calculator", "description": "Add, subtract, multiply or divide two numbers.", "examples": { "output": "15" }, "notes": ["Use switch statement"], "testCases": [ { "input": "10 5 +", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 708, "language": "javascript", "title": "JavaScript Grade Calculator", "description": "Assign grade based on marks (A>=90, B>=80, C>=70, D>=60, F<60).", "examples": { "output": "A" }, "notes": ["Use if-else statements"], "testCases": [ { "input": "95", "expectedOutput": "A" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 709, "language": "javascript", "title": "JavaScript Power Calculation", "description": "Calculate power of a number.", "examples": { "output": "32" }, "notes": ["Use Math.pow() or ** operator"], "testCases": [ { "input": "2 5", "expectedOutput": "32" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 710, "language": "javascript", "title": "JavaScript Square Root", "description": "Find square root of a number.", "examples": { "output": "5" }, "notes": ["Use Math.sqrt()"], "testCases": [ { "input": "25", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 711, "language": "javascript", "title": "JavaScript Absolute Value", "description": "Find absolute value of a number.", "examples": { "output": "5" }, "notes": ["Use Math.abs()"], "testCases": [ { "input": "-5", "expectedOutput": "5" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 712, "language": "javascript", "title": "JavaScript Random Number", "description": "Generate random number between 1 and 100.", "examples": { "output": "42" }, "notes": ["Use Math.random()"], "testCases": [ { "input": "", "expectedOutput": "42" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 713, "language": "javascript", "title": "JavaScript String Contains", "description": "Check if string contains a substring.", "examples": { "output": "true" }, "notes": ["Use .includes() method"], "testCases": [ { "input": "Hello World\nWorld", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 714, "language": "javascript", "title": "JavaScript Replace Characters", "description": "Replace all occurrences of a character in string.", "examples": { "output": "Hxllx" }, "notes": ["Use .replaceAll() or regex"], "testCases": [ { "input": "Hello\ne\nx", "expectedOutput": "Hxllx" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 715, "language": "javascript", "title": "JavaScript Array Average", "description": "Calculate average of array elements.", "examples": { "output": "3" }, "notes": ["Use reduce() method"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 716, "language": "javascript", "title": "JavaScript Count Positive Numbers", "description": "Count positive numbers in an array.", "examples": { "output": "3" }, "notes": ["Use filter() method"], "testCases": [ { "input": "[1,-2,3,-4,5]", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 717, "language": "javascript", "title": "JavaScript Second Largest", "description": "Find second largest number in array.", "examples": { "output": "8" }, "notes": ["Use sort() or manual method"], "testCases": [ { "input": "[3,7,8,2,9]", "expectedOutput": "8" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 718, "language": "javascript", "title": "JavaScript Sum of Squares", "description": "Calculate sum of squares of first N numbers.", "examples": { "output": "55" }, "notes": ["Use for loop or reduce"], "testCases": [ { "input": "5", "expectedOutput": "55" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 719, "language": "javascript", "title": "JavaScript Reverse Number", "description": "Reverse digits of a number.", "examples": { "output": "321" }, "notes": ["Convert to string and reverse"], "testCases": [ { "input": "123", "expectedOutput": "321" } ], "difficulty": "beginner", "category": "JavaScript", "points": 10 },
            { "id": 750, "language": "c", "title": "C Print Pattern Stars", "description": "Print a pattern of stars in triangle shape.", "examples": { "output": "*\n**\n***" }, "notes": ["Use nested loops"], "testCases": [ { "input": "3", "expectedOutput": "*\n**\n***" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 751, "language": "c", "title": "C Count Digits", "description": "Count number of digits in a number.", "examples": { "output": "3" }, "notes": ["Use while loop and division"], "testCases": [ { "input": "123", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 752, "language": "c", "title": "C Print Numbers in Reverse", "description": "Print numbers from N to 1.", "examples": { "output": "5\n4\n3\n2\n1" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "5\n4\n3\n2\n1" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 753, "language": "c", "title": "C Check Vowel", "description": "Check if a character is a vowel.", "examples": { "output": "1" }, "notes": ["Check for a,e,i,o,u"], "testCases": [ { "input": "a", "expectedOutput": "1" }, { "input": "b", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 754, "language": "c", "title": "C Print ASCII Value", "description": "Print ASCII value of a character.", "examples": { "output": "65" }, "notes": ["Cast char to int"], "testCases": [ { "input": "A", "expectedOutput": "65" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 755, "language": "c", "title": "C Largest of Two Numbers", "description": "Find larger of two numbers.", "examples": { "output": "10" }, "notes": ["Use if-else or ternary operator"], "testCases": [ { "input": "5\n10", "expectedOutput": "10" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 756, "language": "c", "title": "C Print Alphabet", "description": "Print all alphabets from A to Z.", "examples": { "output": "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" }, "notes": ["Use for loop with char"], "testCases": [ { "input": "", "expectedOutput": "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 757, "language": "c", "title": "C Check Positive Negative", "description": "Check if number is positive, negative or zero.", "examples": { "output": "Positive" }, "notes": ["Use if-else statements"], "testCases": [ { "input": "5", "expectedOutput": "Positive" }, { "input": "-3", "expectedOutput": "Negative" }, { "input": "0", "expectedOutput": "Zero" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 758, "language": "c", "title": "C Days in Month", "description": "Print number of days in a given month.", "examples": { "output": "31" }, "notes": ["Use switch statement"], "testCases": [ { "input": "1", "expectedOutput": "31" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 759, "language": "c", "title": "C Print Multiplication", "description": "Print result of multiplying two numbers.", "examples": { "output": "20" }, "notes": ["Use * operator"], "testCases": [ { "input": "4\n5", "expectedOutput": "20" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 760, "language": "c", "title": "C Check Divisibility", "description": "Check if first number is divisible by second.", "examples": { "output": "1" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "10\n5", "expectedOutput": "1" }, { "input": "10\n3", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 761, "language": "c", "title": "C Print Square", "description": "Print square of a number.", "examples": { "output": "25" }, "notes": ["Multiply number by itself"], "testCases": [ { "input": "5", "expectedOutput": "25" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 762, "language": "c", "title": "C Print Cube", "description": "Print cube of a number.", "examples": { "output": "125" }, "notes": ["Multiply number by itself twice"], "testCases": [ { "input": "5", "expectedOutput": "125" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 763, "language": "c", "title": "C Swap Using Third Variable", "description": "Swap two numbers using a third variable.", "examples": { "output": "After swap: a = 20, b = 10" }, "notes": ["Use temporary variable"], "testCases": [ { "input": "10\n20", "expectedOutput": "After swap: a = 20, b = 10" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 764, "language": "c", "title": "C Print Even or Odd", "description": "Print whether number is even or odd.", "examples": { "output": "Even" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "4", "expectedOutput": "Even" }, { "input": "5", "expectedOutput": "Odd" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 765, "language": "c", "title": "C Print First N Numbers", "description": "Print first N natural numbers.", "examples": { "output": "1\n2\n3\n4\n5" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "1\n2\n3\n4\n5" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 766, "language": "c", "title": "C Calculate Percentage", "description": "Calculate percentage given marks and total.", "examples": { "output": "80.0" }, "notes": ["Use formula: (marks/total)*100"], "testCases": [ { "input": "80\n100", "expectedOutput": "80.0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 767, "language": "c", "title": "C Print Remainder", "description": "Print remainder when first number is divided by second.", "examples": { "output": "1" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "10\n3", "expectedOutput": "1" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 768, "language": "c", "title": "C Check Alphabet", "description": "Check if character is an alphabet.", "examples": { "output": "1" }, "notes": ["Check ASCII range or use isalpha"], "testCases": [ { "input": "A", "expectedOutput": "1" }, { "input": "1", "expectedOutput": "0" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 769, "language": "c", "title": "C Print Character", "description": "Print character from ASCII value.", "examples": { "output": "A" }, "notes": ["Cast int to char"], "testCases": [ { "input": "65", "expectedOutput": "A" } ], "difficulty": "beginner", "category": "C", "points": 10 },
            { "id": 800, "language": "cpp", "title": "C++ Print Pattern Stars", "description": "Print a pattern of stars in triangle shape.", "examples": { "output": "*\n**\n***" }, "notes": ["Use nested loops"], "testCases": [ { "input": "3", "expectedOutput": "*\n**\n***" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 801, "language": "cpp", "title": "C++ Count Digits", "description": "Count number of digits in a number.", "examples": { "output": "3" }, "notes": ["Use while loop and division"], "testCases": [ { "input": "123", "expectedOutput": "3" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 802, "language": "cpp", "title": "C++ Print Numbers in Reverse", "description": "Print numbers from N to 1.", "examples": { "output": "5\n4\n3\n2\n1" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "5\n4\n3\n2\n1" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 803, "language": "cpp", "title": "C++ Check Vowel", "description": "Check if a character is a vowel.", "examples": { "output": "true" }, "notes": ["Check for a,e,i,o,u"], "testCases": [ { "input": "a", "expectedOutput": "true" }, { "input": "b", "expectedOutput": "false" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 804, "language": "cpp", "title": "C++ Print ASCII Value", "description": "Print ASCII value of a character.", "examples": { "output": "65" }, "notes": ["Cast char to int"], "testCases": [ { "input": "A", "expectedOutput": "65" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 805, "language": "cpp", "title": "C++ Largest of Two Numbers", "description": "Find larger of two numbers.", "examples": { "output": "10" }, "notes": ["Use max() function or if-else"], "testCases": [ { "input": "5 10", "expectedOutput": "10" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 806, "language": "cpp", "title": "C++ Print Alphabet", "description": "Print all alphabets from A to Z.", "examples": { "output": "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" }, "notes": ["Use for loop with char"], "testCases": [ { "input": "", "expectedOutput": "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 807, "language": "cpp", "title": "C++ Check Positive Negative", "description": "Check if number is positive, negative or zero.", "examples": { "output": "Positive" }, "notes": ["Use if-else statements"], "testCases": [ { "input": "5", "expectedOutput": "Positive" }, { "input": "-3", "expectedOutput": "Negative" }, { "input": "0", "expectedOutput": "Zero" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 808, "language": "cpp", "title": "C++ Days in Month", "description": "Print number of days in a given month.", "examples": { "output": "31" }, "notes": ["Use switch statement"], "testCases": [ { "input": "1", "expectedOutput": "31" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 809, "language": "cpp", "title": "C++ Print Multiplication", "description": "Print result of multiplying two numbers.", "examples": { "output": "20" }, "notes": ["Use * operator"], "testCases": [ { "input": "4 5", "expectedOutput": "20" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 810, "language": "cpp", "title": "C++ Check Divisibility", "description": "Check if first number is divisible by second.", "examples": { "output": "true" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "10 5", "expectedOutput": "true" }, { "input": "10 3", "expectedOutput": "false" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 811, "language": "cpp", "title": "C++ Print Square", "description": "Print square of a number.", "examples": { "output": "25" }, "notes": ["Multiply number by itself"], "testCases": [ { "input": "5", "expectedOutput": "25" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 812, "language": "cpp", "title": "C++ Print Cube", "description": "Print cube of a number.", "examples": { "output": "125" }, "notes": ["Multiply number by itself twice"], "testCases": [ { "input": "5", "expectedOutput": "125" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 813, "language": "cpp", "title": "C++ Swap Using Third Variable", "description": "Swap two numbers using a third variable.", "examples": { "output": "After swap: a = 20, b = 10" }, "notes": ["Use temporary variable"], "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 814, "language": "cpp", "title": "C++ Print Even or Odd", "description": "Print whether number is even or odd.", "examples": { "output": "Even" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "4", "expectedOutput": "Even" }, { "input": "5", "expectedOutput": "Odd" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 815, "language": "cpp", "title": "C++ Print First N Numbers", "description": "Print first N natural numbers.", "examples": { "output": "1\n2\n3\n4\n5" }, "notes": ["Use for loop"], "testCases": [ { "input": "5", "expectedOutput": "1\n2\n3\n4\n5" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 816, "language": "cpp", "title": "C++ Calculate Percentage", "description": "Calculate percentage given marks and total.", "examples": { "output": "80" }, "notes": ["Use formula: (marks/total)*100"], "testCases": [ { "input": "80 100", "expectedOutput": "80" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 817, "language": "cpp", "title": "C++ Print Remainder", "description": "Print remainder when first number is divided by second.", "examples": { "output": "1" }, "notes": ["Use modulo operator"], "testCases": [ { "input": "10 3", "expectedOutput": "1" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 818, "language": "cpp", "title": "C++ Check Alphabet", "description": "Check if character is an alphabet.", "examples": { "output": "true" }, "notes": ["Use isalpha() function"], "testCases": [ { "input": "A", "expectedOutput": "true" }, { "input": "1", "expectedOutput": "false" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 819, "language": "cpp", "title": "C++ Print Character", "description": "Print character from ASCII value.", "examples": { "output": "A" }, "notes": ["Cast int to char"], "testCases": [ { "input": "65", "expectedOutput": "A" } ], "difficulty": "beginner", "category": "C++", "points": 10 },
            { "id": 900, "language": "java", "title": "Java Binary Search", "description": "Implement binary search algorithm.", "examples": { "output": "3" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[1,3,5,7,9] 7", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 901, "language": "java", "title": "Java Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Divide and merge"], "testCases": [ { "input": "[5,2,4,1,3]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 902, "language": "java", "title": "Java Anagram Check", "description": "Check if two strings are anagrams.", "examples": { "output": "true" }, "notes": ["Sort characters or count frequency"], "testCases": [ { "input": "listen silent", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 903, "language": "java", "title": "Java Longest Common Subsequence", "description": "Find length of longest common subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "ABCDGH AEDFHR", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 904, "language": "java", "title": "Java Valid Parentheses", "description": "Check if parentheses are balanced.", "examples": { "output": "true" }, "notes": ["Use stack data structure"], "testCases": [ { "input": "()[]{}", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 905, "language": "java", "title": "Java Rotate Array", "description": "Rotate array to right by k steps.", "examples": { "output": "5 6 7 1 2 3 4" }, "notes": ["Use reversal method"], "testCases": [ { "input": "[1,2,3,4,5,6,7] 3", "expectedOutput": "5 6 7 1 2 3 4" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 906, "language": "java", "title": "Java Find Duplicate", "description": "Find duplicate number in array.", "examples": { "output": "2" }, "notes": ["Use Floyd's cycle detection"], "testCases": [ { "input": "[1,3,4,2,2]", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 907, "language": "java", "title": "Java Spiral Matrix", "description": "Print matrix in spiral order.", "examples": { "output": "1 2 3 6 9 8 7 4 5" }, "notes": ["Track boundaries"], "testCases": [ { "input": "[[1,2,3],[4,5,6],[7,8,9]]", "expectedOutput": "1 2 3 6 9 8 7 4 5" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 908, "language": "java", "title": "Java Coin Change", "description": "Find minimum coins needed for amount.", "examples": { "output": "3" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,3,4] 6", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 909, "language": "java", "title": "Java Subarray Sum", "description": "Find subarray with given sum.", "examples": { "output": "1 4" }, "notes": ["Use sliding window"], "testCases": [ { "input": "[1,4,0,0,3,10,5] 7", "expectedOutput": "1 4" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 910, "language": "java", "title": "Java Permutations", "description": "Generate all permutations of array.", "examples": { "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" }, "notes": ["Use backtracking"], "testCases": [ { "input": "[1,2,3]", "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 911, "language": "java", "title": "Java Word Break", "description": "Check if string can be segmented into dictionary words.", "examples": { "output": "true" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "leetcode [leet,code]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 912, "language": "java", "title": "Java Kth Largest Element", "description": "Find kth largest element in array.", "examples": { "output": "5" }, "notes": ["Use quickselect or heap"], "testCases": [ { "input": "[3,2,1,5,6,4] 2", "expectedOutput": "5" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 913, "language": "java", "title": "Java Group Anagrams", "description": "Group strings that are anagrams.", "examples": { "output": "[[eat,tea,ate],[tan,nat],[bat]]" }, "notes": ["Use HashMap with sorted key"], "testCases": [ { "input": "[eat,tea,tan,ate,nat,bat]", "expectedOutput": "[[eat,tea,ate],[tan,nat],[bat]]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 914, "language": "java", "title": "Java Longest Palindrome", "description": "Find longest palindromic substring.", "examples": { "output": "bab" }, "notes": ["Expand around centers"], "testCases": [ { "input": "babad", "expectedOutput": "bab" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 915, "language": "java", "title": "Java Container With Most Water", "description": "Find container that holds most water.", "examples": { "output": "49" }, "notes": ["Use two pointers"], "testCases": [ { "input": "[1,8,6,2,5,4,8,3,7]", "expectedOutput": "49" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 916, "language": "java", "title": "Java 3Sum", "description": "Find all unique triplets that sum to zero.", "examples": { "output": "[[-1,-1,2],[-1,0,1]]" }, "notes": ["Sort and use two pointers"], "testCases": [ { "input": "[-1,0,1,2,-1,-4]", "expectedOutput": "[[-1,-1,2],[-1,0,1]]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 917, "language": "java", "title": "Java Product of Array", "description": "Return array where each element is product of all others.", "examples": { "output": "[24,12,8,6]" }, "notes": ["Use left and right products"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "[24,12,8,6]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 918, "language": "java", "title": "Java Sliding Window Maximum", "description": "Find maximum in each sliding window.", "examples": { "output": "[3,3,5,5,6,7]" }, "notes": ["Use deque"], "testCases": [ { "input": "[1,3,-1,-3,5,3,6,7] 3", "expectedOutput": "[3,3,5,5,6,7]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 919, "language": "java", "title": "Java Minimum Window Substring", "description": "Find minimum window containing all characters.", "examples": { "output": "BANC" }, "notes": ["Use sliding window"], "testCases": [ { "input": "ADOBECODEBANC ABC", "expectedOutput": "BANC" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 920, "language": "java", "title": "Java Serialize Binary Tree", "description": "Serialize and deserialize binary tree.", "examples": { "output": "1,2,null,null,3,4,null,null,5,null,null" }, "notes": ["Use preorder traversal"], "testCases": [ { "input": "[1,2,3,null,null,4,5]", "expectedOutput": "1,2,null,null,3,4,null,null,5,null,null" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 921, "language": "java", "title": "Java Course Schedule", "description": "Check if all courses can be finished.", "examples": { "output": "true" }, "notes": ["Use topological sort"], "testCases": [ { "input": "2 [[1,0]]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 922, "language": "java", "title": "Java House Robber", "description": "Maximum money that can be robbed.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,2,3,1]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 923, "language": "java", "title": "Java Number of Islands", "description": "Count number of islands in grid.", "examples": { "output": "1" }, "notes": ["Use DFS or BFS"], "testCases": [ { "input": "[[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 924, "language": "java", "title": "Java Clone Graph", "description": "Clone an undirected graph.", "examples": { "output": "[[2,4],[1,3],[2,4],[1,3]]" }, "notes": ["Use DFS with HashMap"], "testCases": [ { "input": "[[2,4],[1,3],[2,4],[1,3]]", "expectedOutput": "[[2,4],[1,3],[2,4],[1,3]]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 925, "language": "java", "title": "Java Pacific Atlantic Water", "description": "Find cells where water can flow to both oceans.", "examples": { "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" }, "notes": ["Use DFS from borders"], "testCases": [ { "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "expectedOutput": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 926, "language": "java", "title": "Java Longest Increasing Subsequence", "description": "Find length of longest increasing subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[10,9,2,5,3,7,101,18]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 927, "language": "java", "title": "Java Decode Ways", "description": "Count ways to decode a string.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "12", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 928, "language": "java", "title": "Java Unique Paths", "description": "Count unique paths in grid.", "examples": { "output": "28" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "7 3", "expectedOutput": "28" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 929, "language": "java", "title": "Java Jump Game", "description": "Check if you can reach the last index.", "examples": { "output": "true" }, "notes": ["Use greedy approach"], "testCases": [ { "input": "[2,3,1,1,4]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "Java", "points": 20 },
            { "id": 950, "language": "python", "title": "Python Binary Search", "description": "Implement binary search algorithm.", "examples": { "output": "3" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[1,3,5,7,9]\n7", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 951, "language": "python", "title": "Python Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "[1,2,3,4,5]" }, "notes": ["Divide and merge"], "testCases": [ { "input": "[5,2,4,1,3]", "expectedOutput": "[1,2,3,4,5]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 952, "language": "python", "title": "Python Anagram Check", "description": "Check if two strings are anagrams.", "examples": { "output": "True" }, "notes": ["Sort characters or count frequency"], "testCases": [ { "input": "listen\nsilent", "expectedOutput": "True" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 953, "language": "python", "title": "Python Longest Common Subsequence", "description": "Find length of longest common subsequence.", "examples": { "output": "3" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "ABCDGH\nAEDFHR", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 954, "language": "python", "title": "Python Valid Parentheses", "description": "Check if parentheses are balanced.", "examples": { "output": "True" }, "notes": ["Use stack data structure"], "testCases": [ { "input": "()[]{}", "expectedOutput": "True" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 955, "language": "python", "title": "Python Rotate List", "description": "Rotate list to right by k steps.", "examples": { "output": "[5,6,7,1,2,3,4]" }, "notes": ["Use slicing"], "testCases": [ { "input": "[1,2,3,4,5,6,7]\n3", "expectedOutput": "[5,6,7,1,2,3,4]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 956, "language": "python", "title": "Python Find Duplicate", "description": "Find duplicate number in list.", "examples": { "output": "2" }, "notes": ["Use set or Floyd's algorithm"], "testCases": [ { "input": "[1,3,4,2,2]", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 957, "language": "python", "title": "Python Spiral Matrix", "description": "Print matrix in spiral order.", "examples": { "output": "[1,2,3,6,9,8,7,4,5]" }, "notes": ["Track boundaries"], "testCases": [ { "input": "[[1,2,3],[4,5,6],[7,8,9]]", "expectedOutput": "[1,2,3,6,9,8,7,4,5]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 958, "language": "python", "title": "Python Coin Change", "description": "Find minimum coins needed for amount.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,3,4]\n6", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 959, "language": "python", "title": "Python Subarray Sum", "description": "Find subarray with given sum.", "examples": { "output": "[1,4]" }, "notes": ["Use sliding window"], "testCases": [ { "input": "[1,4,0,0,3,10,5]\n7", "expectedOutput": "[1,4]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 960, "language": "python", "title": "Python Permutations", "description": "Generate all permutations of list.", "examples": { "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" }, "notes": ["Use itertools or recursion"], "testCases": [ { "input": "[1,2,3]", "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 961, "language": "python", "title": "Python Word Break", "description": "Check if string can be segmented into dictionary words.", "examples": { "output": "True" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "leetcode\n[leet,code]", "expectedOutput": "True" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 962, "language": "python", "title": "Python Kth Largest Element", "description": "Find kth largest element in list.", "examples": { "output": "5" }, "notes": ["Use heapq or quickselect"], "testCases": [ { "input": "[3,2,1,5,6,4]\n2", "expectedOutput": "5" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 963, "language": "python", "title": "Python Group Anagrams", "description": "Group strings that are anagrams.", "examples": { "output": "[['eat','tea','ate'],['tan','nat'],['bat']]" }, "notes": ["Use dict with sorted key"], "testCases": [ { "input": "['eat','tea','tan','ate','nat','bat']", "expectedOutput": "[['eat','tea','ate'],['tan','nat'],['bat']]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 964, "language": "python", "title": "Python Longest Palindrome", "description": "Find longest palindromic substring.", "examples": { "output": "bab" }, "notes": ["Expand around centers"], "testCases": [ { "input": "babad", "expectedOutput": "bab" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 965, "language": "python", "title": "Python Container With Most Water", "description": "Find container that holds most water.", "examples": { "output": "49" }, "notes": ["Use two pointers"], "testCases": [ { "input": "[1,8,6,2,5,4,8,3,7]", "expectedOutput": "49" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 966, "language": "python", "title": "Python 3Sum", "description": "Find all unique triplets that sum to zero.", "examples": { "output": "[[-1,-1,2],[-1,0,1]]" }, "notes": ["Sort and use two pointers"], "testCases": [ { "input": "[-1,0,1,2,-1,-4]", "expectedOutput": "[[-1,-1,2],[-1,0,1]]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 967, "language": "python", "title": "Python Product of Array", "description": "Return list where each element is product of all others.", "examples": { "output": "[24,12,8,6]" }, "notes": ["Use left and right products"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "[24,12,8,6]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 968, "language": "python", "title": "Python Sliding Window Maximum", "description": "Find maximum in each sliding window.", "examples": { "output": "[3,3,5,5,6,7]" }, "notes": ["Use deque"], "testCases": [ { "input": "[1,3,-1,-3,5,3,6,7]\n3", "expectedOutput": "[3,3,5,5,6,7]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 969, "language": "python", "title": "Python Minimum Window Substring", "description": "Find minimum window containing all characters.", "examples": { "output": "BANC" }, "notes": ["Use sliding window"], "testCases": [ { "input": "ADOBECODEBANC\nABC", "expectedOutput": "BANC" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 970, "language": "python", "title": "Python Serialize Binary Tree", "description": "Serialize and deserialize binary tree.", "examples": { "output": "1,2,None,None,3,4,None,None,5,None,None" }, "notes": ["Use preorder traversal"], "testCases": [ { "input": "[1,2,3,None,None,4,5]", "expectedOutput": "1,2,None,None,3,4,None,None,5,None,None" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 971, "language": "python", "title": "Python Course Schedule", "description": "Check if all courses can be finished.", "examples": { "output": "True" }, "notes": ["Use topological sort"], "testCases": [ { "input": "2\n[[1,0]]", "expectedOutput": "True" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 972, "language": "python", "title": "Python House Robber", "description": "Maximum money that can be robbed.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,2,3,1]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 973, "language": "python", "title": "Python Number of Islands", "description": "Count number of islands in grid.", "examples": { "output": "1" }, "notes": ["Use DFS or BFS"], "testCases": [ { "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 974, "language": "python", "title": "Python Clone Graph", "description": "Clone an undirected graph.", "examples": { "output": "[[2,4],[1,3],[2,4],[1,3]]" }, "notes": ["Use DFS with dict"], "testCases": [ { "input": "[[2,4],[1,3],[2,4],[1,3]]", "expectedOutput": "[[2,4],[1,3],[2,4],[1,3]]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 975, "language": "python", "title": "Python Pacific Atlantic Water", "description": "Find cells where water can flow to both oceans.", "examples": { "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" }, "notes": ["Use DFS from borders"], "testCases": [ { "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "expectedOutput": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 976, "language": "python", "title": "Python Longest Increasing Subsequence", "description": "Find length of longest increasing subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[10,9,2,5,3,7,101,18]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 977, "language": "python", "title": "Python Decode Ways", "description": "Count ways to decode a string.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "12", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 978, "language": "python", "title": "Python Unique Paths", "description": "Count unique paths in grid.", "examples": { "output": "28" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "7\n3", "expectedOutput": "28" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 979, "language": "python", "title": "Python Jump Game", "description": "Check if you can reach the last index.", "examples": { "output": "True" }, "notes": ["Use greedy approach"], "testCases": [ { "input": "[2,3,1,1,4]", "expectedOutput": "True" } ], "difficulty": "intermediate", "category": "Python", "points": 20 },
            { "id": 1000, "language": "javascript", "title": "JavaScript Binary Search", "description": "Implement binary search algorithm.", "examples": { "output": "3" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[1,3,5,7,9] 7", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1001, "language": "javascript", "title": "JavaScript Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "[1,2,3,4,5]" }, "notes": ["Divide and merge"], "testCases": [ { "input": "[5,2,4,1,3]", "expectedOutput": "[1,2,3,4,5]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1002, "language": "javascript", "title": "JavaScript Anagram Check", "description": "Check if two strings are anagrams.", "examples": { "output": "true" }, "notes": ["Sort characters or count frequency"], "testCases": [ { "input": "listen silent", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1003, "language": "javascript", "title": "JavaScript Longest Common Subsequence", "description": "Find length of longest common subsequence.", "examples": { "output": "3" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "ABCDGH AEDFHR", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1004, "language": "javascript", "title": "JavaScript Valid Parentheses", "description": "Check if parentheses are balanced.", "examples": { "output": "true" }, "notes": ["Use stack data structure"], "testCases": [ { "input": "()[]{}", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1005, "language": "javascript", "title": "JavaScript Rotate Array", "description": "Rotate array to right by k steps.", "examples": { "output": "[5,6,7,1,2,3,4]" }, "notes": ["Use array methods"], "testCases": [ { "input": "[1,2,3,4,5,6,7] 3", "expectedOutput": "[5,6,7,1,2,3,4]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1006, "language": "javascript", "title": "JavaScript Find Duplicate", "description": "Find duplicate number in array.", "examples": { "output": "2" }, "notes": ["Use Set or Floyd's algorithm"], "testCases": [ { "input": "[1,3,4,2,2]", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1007, "language": "javascript", "title": "JavaScript Spiral Matrix", "description": "Print matrix in spiral order.", "examples": { "output": "[1,2,3,6,9,8,7,4,5]" }, "notes": ["Track boundaries"], "testCases": [ { "input": "[[1,2,3],[4,5,6],[7,8,9]]", "expectedOutput": "[1,2,3,6,9,8,7,4,5]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1008, "language": "javascript", "title": "JavaScript Coin Change", "description": "Find minimum coins needed for amount.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,3,4] 6", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1009, "language": "javascript", "title": "JavaScript Subarray Sum", "description": "Find subarray with given sum.", "examples": { "output": "[1,4]" }, "notes": ["Use sliding window"], "testCases": [ { "input": "[1,4,0,0,3,10,5] 7", "expectedOutput": "[1,4]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1010, "language": "javascript", "title": "JavaScript Permutations", "description": "Generate all permutations of array.", "examples": { "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" }, "notes": ["Use recursion or backtracking"], "testCases": [ { "input": "[1,2,3]", "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1011, "language": "javascript", "title": "JavaScript Word Break", "description": "Check if string can be segmented into dictionary words.", "examples": { "output": "true" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "leetcode [leet,code]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1012, "language": "javascript", "title": "JavaScript Kth Largest Element", "description": "Find kth largest element in array.", "examples": { "output": "5" }, "notes": ["Use quickselect or sort"], "testCases": [ { "input": "[3,2,1,5,6,4] 2", "expectedOutput": "5" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1013, "language": "javascript", "title": "JavaScript Group Anagrams", "description": "Group strings that are anagrams.", "examples": { "output": "[['eat','tea','ate'],['tan','nat'],['bat']]" }, "notes": ["Use Map with sorted key"], "testCases": [ { "input": "['eat','tea','tan','ate','nat','bat']", "expectedOutput": "[['eat','tea','ate'],['tan','nat'],['bat']]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1014, "language": "javascript", "title": "JavaScript Longest Palindrome", "description": "Find longest palindromic substring.", "examples": { "output": "bab" }, "notes": ["Expand around centers"], "testCases": [ { "input": "babad", "expectedOutput": "bab" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1015, "language": "javascript", "title": "JavaScript Container With Most Water", "description": "Find container that holds most water.", "examples": { "output": "49" }, "notes": ["Use two pointers"], "testCases": [ { "input": "[1,8,6,2,5,4,8,3,7]", "expectedOutput": "49" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1016, "language": "javascript", "title": "JavaScript 3Sum", "description": "Find all unique triplets that sum to zero.", "examples": { "output": "[[-1,-1,2],[-1,0,1]]" }, "notes": ["Sort and use two pointers"], "testCases": [ { "input": "[-1,0,1,2,-1,-4]", "expectedOutput": "[[-1,-1,2],[-1,0,1]]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1017, "language": "javascript", "title": "JavaScript Product of Array", "description": "Return array where each element is product of all others.", "examples": { "output": "[24,12,8,6]" }, "notes": ["Use left and right products"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "[24,12,8,6]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1018, "language": "javascript", "title": "JavaScript Sliding Window Maximum", "description": "Find maximum in each sliding window.", "examples": { "output": "[3,3,5,5,6,7]" }, "notes": ["Use deque or array"], "testCases": [ { "input": "[1,3,-1,-3,5,3,6,7] 3", "expectedOutput": "[3,3,5,5,6,7]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1019, "language": "javascript", "title": "JavaScript Minimum Window Substring", "description": "Find minimum window containing all characters.", "examples": { "output": "BANC" }, "notes": ["Use sliding window"], "testCases": [ { "input": "ADOBECODEBANC ABC", "expectedOutput": "BANC" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1020, "language": "javascript", "title": "JavaScript Serialize Binary Tree", "description": "Serialize and deserialize binary tree.", "examples": { "output": "1,2,null,null,3,4,null,null,5,null,null" }, "notes": ["Use preorder traversal"], "testCases": [ { "input": "[1,2,3,null,null,4,5]", "expectedOutput": "1,2,null,null,3,4,null,null,5,null,null" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1021, "language": "javascript", "title": "JavaScript Course Schedule", "description": "Check if all courses can be finished.", "examples": { "output": "true" }, "notes": ["Use topological sort"], "testCases": [ { "input": "2 [[1,0]]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1022, "language": "javascript", "title": "JavaScript House Robber", "description": "Maximum money that can be robbed.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,2,3,1]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1023, "language": "javascript", "title": "JavaScript Number of Islands", "description": "Count number of islands in grid.", "examples": { "output": "1" }, "notes": ["Use DFS or BFS"], "testCases": [ { "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1024, "language": "javascript", "title": "JavaScript Clone Graph", "description": "Clone an undirected graph.", "examples": { "output": "[[2,4],[1,3],[2,4],[1,3]]" }, "notes": ["Use DFS with Map"], "testCases": [ { "input": "[[2,4],[1,3],[2,4],[1,3]]", "expectedOutput": "[[2,4],[1,3],[2,4],[1,3]]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1025, "language": "javascript", "title": "JavaScript Pacific Atlantic Water", "description": "Find cells where water can flow to both oceans.", "examples": { "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" }, "notes": ["Use DFS from borders"], "testCases": [ { "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "expectedOutput": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1026, "language": "javascript", "title": "JavaScript Longest Increasing Subsequence", "description": "Find length of longest increasing subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[10,9,2,5,3,7,101,18]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1027, "language": "javascript", "title": "JavaScript Decode Ways", "description": "Count ways to decode a string.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "12", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1028, "language": "javascript", "title": "JavaScript Unique Paths", "description": "Count unique paths in grid.", "examples": { "output": "28" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "7 3", "expectedOutput": "28" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1029, "language": "javascript", "title": "JavaScript Jump Game", "description": "Check if you can reach the last index.", "examples": { "output": "true" }, "notes": ["Use greedy approach"], "testCases": [ { "input": "[2,3,1,1,4]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "JavaScript", "points": 20 },
            { "id": 1050, "language": "c", "title": "C Binary Search", "description": "Implement binary search algorithm.", "examples": { "output": "3" }, "notes": ["Use divide and conquer"], "testCases": [ { "input": "[1,3,5,7,9] 5 7", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1051, "language": "c", "title": "C Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Divide and merge"], "testCases": [ { "input": "[5,2,4,1,3] 5", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1052, "language": "c", "title": "C Anagram Check", "description": "Check if two strings are anagrams.", "examples": { "output": "1" }, "notes": ["Sort characters or count frequency"], "testCases": [ { "input": "listen\nsilent", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1053, "language": "c", "title": "C Longest Common Subsequence", "description": "Find length of longest common subsequence.", "examples": { "output": "3" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "ABCDGH\nAEDFHR", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1054, "language": "c", "title": "C Valid Parentheses", "description": "Check if parentheses are balanced.", "examples": { "output": "1" }, "notes": ["Use stack data structure"], "testCases": [ { "input": "()[]{}", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1055, "language": "c", "title": "C Rotate Array", "description": "Rotate array to right by k steps.", "examples": { "output": "5 6 7 1 2 3 4" }, "notes": ["Use reversal method"], "testCases": [ { "input": "[1,2,3,4,5,6,7] 7 3", "expectedOutput": "5 6 7 1 2 3 4" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1056, "language": "c", "title": "C Find Duplicate", "description": "Find duplicate number in array.", "examples": { "output": "2" }, "notes": ["Use Floyd's cycle detection"], "testCases": [ { "input": "[1,3,4,2,2] 5", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1057, "language": "c", "title": "C Spiral Matrix", "description": "Print matrix in spiral order.", "examples": { "output": "1 2 3 6 9 8 7 4 5" }, "notes": ["Track boundaries"], "testCases": [ { "input": "[[1,2,3],[4,5,6],[7,8,9]] 3 3", "expectedOutput": "1 2 3 6 9 8 7 4 5" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1058, "language": "c", "title": "C Coin Change", "description": "Find minimum coins needed for amount.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,3,4] 3 6", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1059, "language": "c", "title": "C Subarray Sum", "description": "Find subarray with given sum.", "examples": { "output": "1 4" }, "notes": ["Use sliding window"], "testCases": [ { "input": "[1,4,0,0,3,10,5] 7 7", "expectedOutput": "1 4" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1060, "language": "c", "title": "C Permutations", "description": "Generate all permutations of array.", "examples": { "output": "123 132 213 231 312 321" }, "notes": ["Use backtracking"], "testCases": [ { "input": "[1,2,3] 3", "expectedOutput": "123 132 213 231 312 321" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1061, "language": "c", "title": "C Word Break", "description": "Check if string can be segmented into dictionary words.", "examples": { "output": "1" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "leetcode\nleet code", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1062, "language": "c", "title": "C Kth Largest Element", "description": "Find kth largest element in array.", "examples": { "output": "5" }, "notes": ["Use quickselect or heap"], "testCases": [ { "input": "[3,2,1,5,6,4] 6 2", "expectedOutput": "5" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1063, "language": "c", "title": "C Group Anagrams", "description": "Group strings that are anagrams.", "examples": { "output": "eat tea ate\ntan nat\nbat" }, "notes": ["Use sorting and grouping"], "testCases": [ { "input": "eat tea tan ate nat bat", "expectedOutput": "eat tea ate\ntan nat\nbat" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1064, "language": "c", "title": "C Longest Palindrome", "description": "Find longest palindromic substring.", "examples": { "output": "bab" }, "notes": ["Expand around centers"], "testCases": [ { "input": "babad", "expectedOutput": "bab" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1065, "language": "c", "title": "C Container With Most Water", "description": "Find container that holds most water.", "examples": { "output": "49" }, "notes": ["Use two pointers"], "testCases": [ { "input": "[1,8,6,2,5,4,8,3,7] 9", "expectedOutput": "49" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1066, "language": "c", "title": "C 3Sum", "description": "Find all unique triplets that sum to zero.", "examples": { "output": "-1 -1 2\n-1 0 1" }, "notes": ["Sort and use two pointers"], "testCases": [ { "input": "[-1,0,1,2,-1,-4] 6", "expectedOutput": "-1 -1 2\n-1 0 1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1067, "language": "c", "title": "C Product of Array", "description": "Return array where each element is product of all others.", "examples": { "output": "24 12 8 6" }, "notes": ["Use left and right products"], "testCases": [ { "input": "[1,2,3,4] 4", "expectedOutput": "24 12 8 6" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1068, "language": "c", "title": "C Sliding Window Maximum", "description": "Find maximum in each sliding window.", "examples": { "output": "3 3 5 5 6 7" }, "notes": ["Use deque or array"], "testCases": [ { "input": "[1,3,-1,-3,5,3,6,7] 8 3", "expectedOutput": "3 3 5 5 6 7" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1069, "language": "c", "title": "C Minimum Window Substring", "description": "Find minimum window containing all characters.", "examples": { "output": "BANC" }, "notes": ["Use sliding window"], "testCases": [ { "input": "ADOBECODEBANC\nABC", "expectedOutput": "BANC" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1070, "language": "c", "title": "C Serialize Binary Tree", "description": "Serialize binary tree to string.", "examples": { "output": "1,2,#,#,3,4,#,#,5,#,#" }, "notes": ["Use preorder traversal"], "testCases": [ { "input": "[1,2,3,#,#,4,5]", "expectedOutput": "1,2,#,#,3,4,#,#,5,#,#" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1071, "language": "c", "title": "C Course Schedule", "description": "Check if all courses can be finished.", "examples": { "output": "1" }, "notes": ["Use topological sort"], "testCases": [ { "input": "2\n1 0", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1072, "language": "c", "title": "C House Robber", "description": "Maximum money that can be robbed.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,2,3,1] 4", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1073, "language": "c", "title": "C Number of Islands", "description": "Count number of islands in grid.", "examples": { "output": "1" }, "notes": ["Use DFS or BFS"], "testCases": [ { "input": "11110\n11010\n11000\n00000", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1074, "language": "c", "title": "C Clone Graph", "description": "Clone an undirected graph.", "examples": { "output": "Cloned successfully" }, "notes": ["Use DFS with array"], "testCases": [ { "input": "[[2,4],[1,3],[2,4],[1,3]]", "expectedOutput": "Cloned successfully" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1075, "language": "c", "title": "C Pacific Atlantic Water", "description": "Find cells where water can flow to both oceans.", "examples": { "output": "0,4 1,3 1,4 2,2 3,0 3,1 4,0" }, "notes": ["Use DFS from borders"], "testCases": [ { "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "expectedOutput": "0,4 1,3 1,4 2,2 3,0 3,1 4,0" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1076, "language": "c", "title": "C Longest Increasing Subsequence", "description": "Find length of longest increasing subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[10,9,2,5,3,7,101,18] 8", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1077, "language": "c", "title": "C Decode Ways", "description": "Count ways to decode a string.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "12", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1078, "language": "c", "title": "C Unique Paths", "description": "Count unique paths in grid.", "examples": { "output": "28" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "7 3", "expectedOutput": "28" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1079, "language": "c", "title": "C Jump Game", "description": "Check if you can reach the last index.", "examples": { "output": "1" }, "notes": ["Use greedy approach"], "testCases": [ { "input": "[2,3,1,1,4] 5", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C", "points": 20 },
            { "id": 1100, "language": "cpp", "title": "C++ Binary Search", "description": "Implement binary search algorithm.", "examples": { "output": "3" }, "notes": ["Use STL or custom implementation"], "testCases": [ { "input": "[1,3,5,7,9] 7", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1101, "language": "cpp", "title": "C++ Merge Sort", "description": "Implement merge sort algorithm.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use STL or custom implementation"], "testCases": [ { "input": "[5,2,4,1,3]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1102, "language": "cpp", "title": "C++ Anagram Check", "description": "Check if two strings are anagrams.", "examples": { "output": "true" }, "notes": ["Use STL sort or map"], "testCases": [ { "input": "listen silent", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1103, "language": "cpp", "title": "C++ Longest Common Subsequence", "description": "Find length of longest common subsequence.", "examples": { "output": "3" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "ABCDGH AEDFHR", "expectedOutput": "3" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1104, "language": "cpp", "title": "C++ Valid Parentheses", "description": "Check if parentheses are balanced.", "examples": { "output": "true" }, "notes": ["Use STL stack"], "testCases": [ { "input": "()[]{}", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1105, "language": "cpp", "title": "C++ Rotate Vector", "description": "Rotate vector to right by k steps.", "examples": { "output": "5 6 7 1 2 3 4" }, "notes": ["Use STL rotate or custom"], "testCases": [ { "input": "[1,2,3,4,5,6,7] 3", "expectedOutput": "5 6 7 1 2 3 4" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1106, "language": "cpp", "title": "C++ Find Duplicate", "description": "Find duplicate number in vector.", "examples": { "output": "2" }, "notes": ["Use set or Floyd's algorithm"], "testCases": [ { "input": "[1,3,4,2,2]", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1107, "language": "cpp", "title": "C++ Spiral Matrix", "description": "Print matrix in spiral order.", "examples": { "output": "1 2 3 6 9 8 7 4 5" }, "notes": ["Track boundaries"], "testCases": [ { "input": "[[1,2,3],[4,5,6],[7,8,9]]", "expectedOutput": "1 2 3 6 9 8 7 4 5" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1108, "language": "cpp", "title": "C++ Coin Change", "description": "Find minimum coins needed for amount.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,3,4] 6", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1109, "language": "cpp", "title": "C++ Subarray Sum", "description": "Find subarray with given sum.", "examples": { "output": "1 4" }, "notes": ["Use sliding window"], "testCases": [ { "input": "[1,4,0,0,3,10,5] 7", "expectedOutput": "1 4" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1110, "language": "cpp", "title": "C++ Permutations", "description": "Generate all permutations of vector.", "examples": { "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" }, "notes": ["Use STL next_permutation or recursion"], "testCases": [ { "input": "[1,2,3]", "expectedOutput": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1111, "language": "cpp", "title": "C++ Word Break", "description": "Check if string can be segmented into dictionary words.", "examples": { "output": "true" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "leetcode [leet,code]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1112, "language": "cpp", "title": "C++ Kth Largest Element", "description": "Find kth largest element in vector.", "examples": { "output": "5" }, "notes": ["Use STL nth_element or priority_queue"], "testCases": [ { "input": "[3,2,1,5,6,4] 2", "expectedOutput": "5" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1113, "language": "cpp", "title": "C++ Group Anagrams", "description": "Group strings that are anagrams.", "examples": { "output": "[['eat','tea','ate'],['tan','nat'],['bat']]" }, "notes": ["Use unordered_map with sorted key"], "testCases": [ { "input": "['eat','tea','tan','ate','nat','bat']", "expectedOutput": "[['eat','tea','ate'],['tan','nat'],['bat']]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1114, "language": "cpp", "title": "C++ Longest Palindrome", "description": "Find longest palindromic substring.", "examples": { "output": "bab" }, "notes": ["Expand around centers"], "testCases": [ { "input": "babad", "expectedOutput": "bab" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1115, "language": "cpp", "title": "C++ Container With Most Water", "description": "Find container that holds most water.", "examples": { "output": "49" }, "notes": ["Use two pointers"], "testCases": [ { "input": "[1,8,6,2,5,4,8,3,7]", "expectedOutput": "49" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1116, "language": "cpp", "title": "C++ 3Sum", "description": "Find all unique triplets that sum to zero.", "examples": { "output": "[[-1,-1,2],[-1,0,1]]" }, "notes": ["Sort and use two pointers"], "testCases": [ { "input": "[-1,0,1,2,-1,-4]", "expectedOutput": "[[-1,-1,2],[-1,0,1]]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1117, "language": "cpp", "title": "C++ Product of Array", "description": "Return vector where each element is product of all others.", "examples": { "output": "[24,12,8,6]" }, "notes": ["Use left and right products"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "[24,12,8,6]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1118, "language": "cpp", "title": "C++ Sliding Window Maximum", "description": "Find maximum in each sliding window.", "examples": { "output": "[3,3,5,5,6,7]" }, "notes": ["Use deque or multiset"], "testCases": [ { "input": "[1,3,-1,-3,5,3,6,7] 3", "expectedOutput": "[3,3,5,5,6,7]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1119, "language": "cpp", "title": "C++ Minimum Window Substring", "description": "Find minimum window containing all characters.", "examples": { "output": "BANC" }, "notes": ["Use sliding window"], "testCases": [ { "input": "ADOBECODEBANC ABC", "expectedOutput": "BANC" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1120, "language": "cpp", "title": "C++ Serialize Binary Tree", "description": "Serialize and deserialize binary tree.", "examples": { "output": "1,2,null,null,3,4,null,null,5,null,null" }, "notes": ["Use preorder traversal"], "testCases": [ { "input": "[1,2,3,null,null,4,5]", "expectedOutput": "1,2,null,null,3,4,null,null,5,null,null" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1121, "language": "cpp", "title": "C++ Course Schedule", "description": "Check if all courses can be finished.", "examples": { "output": "true" }, "notes": ["Use topological sort"], "testCases": [ { "input": "2 [[1,0]]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1122, "language": "cpp", "title": "C++ House Robber", "description": "Maximum money that can be robbed.", "examples": { "output": "4" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "[1,2,3,1]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1123, "language": "cpp", "title": "C++ Number of Islands", "description": "Count number of islands in grid.", "examples": { "output": "1" }, "notes": ["Use DFS or BFS"], "testCases": [ { "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]", "expectedOutput": "1" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1124, "language": "cpp", "title": "C++ Clone Graph", "description": "Clone an undirected graph.", "examples": { "output": "[[2,4],[1,3],[2,4],[1,3]]" }, "notes": ["Use DFS with unordered_map"], "testCases": [ { "input": "[[2,4],[1,3],[2,4],[1,3]]", "expectedOutput": "[[2,4],[1,3],[2,4],[1,3]]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1125, "language": "cpp", "title": "C++ Pacific Atlantic Water", "description": "Find cells where water can flow to both oceans.", "examples": { "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" }, "notes": ["Use DFS from borders"], "testCases": [ { "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "expectedOutput": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1126, "language": "cpp", "title": "C++ Longest Increasing Subsequence", "description": "Find length of longest increasing subsequence.", "examples": { "output": "4" }, "notes": ["Use dynamic programming or binary search"], "testCases": [ { "input": "[10,9,2,5,3,7,101,18]", "expectedOutput": "4" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1127, "language": "cpp", "title": "C++ Decode Ways", "description": "Count ways to decode a string.", "examples": { "output": "2" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "12", "expectedOutput": "2" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1128, "language": "cpp", "title": "C++ Unique Paths", "description": "Count unique paths in grid.", "examples": { "output": "28" }, "notes": ["Use dynamic programming"], "testCases": [ { "input": "7 3", "expectedOutput": "28" } ], "difficulty": "intermediate", "category": "C++", "points": 20 },
            { "id": 1129, "language": "cpp", "title": "C++ Jump Game", "description": "Check if you can reach the last index.", "examples": { "output": "true" }, "notes": ["Use greedy approach"], "testCases": [ { "input": "[2,3,1,1,4]", "expectedOutput": "true" } ], "difficulty": "intermediate", "category": "C++", "points": 20 }
    ]
}
