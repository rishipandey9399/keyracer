{
    "challenges": [
        {
            "id": 101,
            "language": "java",
            "title": "Java Hello World",
            "description": "Write a Java program that prints 'Hello, World!' to the console.",
            "examples": { "output": "Hello, World!" },
            "notes": ["Use System.out.println", "Output must match exactly"],
            "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 102,
            "language": "java",
            "title": "Java Even Numbers",
            "description": "Print all even numbers from 2 to 100 in Java.",
            "examples": { "output": "2\n4\n...\n100" },
            "notes": ["Use a for loop", "Print each number on a new line"],
            "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n...\n100" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 103,
            "language": "java",
            "title": "Java Swap Two Numbers",
            "description": "Swap two numbers without using a third variable in Java.",
            "examples": { "output": "After swap: a = 20, b = 10" },
            "notes": ["Don't use a temporary variable", "Use arithmetic operations"],
            "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        {
            "id": 104,
            "language": "java",
            "title": "Java Prime Number Checker",
            "description": "Write a Java method isPrime(int n) that returns true if n is prime.",
            "examples": { "output": "true\nfalse" },
            "notes": ["Return true for prime numbers, false otherwise", "Handle up to 1000"],
            "testCases": [ { "input": "17", "expectedOutput": "true" }, { "input": "4", "expectedOutput": "false" } ],
            "difficulty": "beginner",
            "category": "Java",
            "points": 10
        },
        { "id": 105, "language": "java", "title": "Java Factorial", "description": "Write a Java method to calculate the factorial of a number.", "examples": { "output": "120" }, "notes": ["Use recursion or loop"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 106, "language": "java", "title": "Java Fibonacci", "description": "Print the first N Fibonacci numbers.", "examples": { "output": "0 1 1 2 3" }, "notes": ["Use loop or recursion"], "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 107, "language": "java", "title": "Java Reverse String", "description": "Reverse a given string in Java.", "examples": { "output": "cba" }, "notes": ["Use StringBuilder or loop"], "testCases": [ { "input": "abc", "expectedOutput": "cba" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 108, "language": "java", "title": "Java Palindrome Checker", "description": "Check if a string is a palindrome.", "examples": { "output": "true" }, "notes": ["Ignore case"], "testCases": [ { "input": "Madam", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 109, "language": "java", "title": "Java Sum Array", "description": "Sum all elements in an integer array.", "examples": { "output": "15" }, "notes": ["Use for loop"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 110, "language": "java", "title": "Java Find Max", "description": "Find the maximum value in an array.", "examples": { "output": "9" }, "notes": ["Use for loop"], "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 111, "language": "java", "title": "Java Count Vowels", "description": "Count the number of vowels in a string.", "examples": { "output": "3" }, "notes": ["Ignore case"], "testCases": [ { "input": "Hello", "expectedOutput": "2" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 112, "language": "java", "title": "Java Remove Spaces", "description": "Remove all spaces from a string.", "examples": { "output": "HelloWorld" }, "notes": ["Use replaceAll"], "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 113, "language": "java", "title": "Java Array Sort", "description": "Sort an array of integers in ascending order.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use Arrays.sort"], "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 114, "language": "java", "title": "Java Character Frequency", "description": "Count frequency of each character in a string.", "examples": { "output": "a:2 b:1" }, "notes": ["Use HashMap"], "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 115, "language": "java", "title": "Java Leap Year", "description": "Check if a year is a leap year.", "examples": { "output": "true" }, "notes": ["Use modulo"], "testCases": [ { "input": "2020", "expectedOutput": "true" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 116, "language": "java", "title": "Java Sum Digits", "description": "Sum all digits of a number.", "examples": { "output": "6" }, "notes": ["Use loop"], "testCases": [ { "input": "123", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 117, "language": "java", "title": "Java Remove Duplicates", "description": "Remove duplicate elements from an array.", "examples": { "output": "1 2 3" }, "notes": ["Use Set"], "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 118, "language": "java", "title": "Java Reverse Array", "description": "Reverse an array of integers.", "examples": { "output": "5 4 3 2 1" }, "notes": ["Use loop"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 119, "language": "java", "title": "Java Sum Even Numbers", "description": "Sum all even numbers in an array.", "examples": { "output": "6" }, "notes": ["Use modulo"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Java", "points": 10 },
        { "id": 130, "language": "python", "title": "Python Hello World", "description": "Write a Python program that prints 'Hello, World!' to the console.", "examples": { "output": "Hello, World!" }, "notes": ["Use print()"], "testCases": [ { "input": "", "expectedOutput": "Hello, World!" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 131, "language": "python", "title": "Python Even Numbers", "description": "Print all even numbers from 2 to 100 in Python.", "examples": { "output": "2\n4\n...\n100" }, "notes": ["Use for loop"], "testCases": [ { "input": "", "expectedOutput": "2\n4\n6\n8\n10\n...\n100" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 132, "language": "python", "title": "Python Swap Two Numbers", "description": "Swap two numbers without using a third variable in Python.", "examples": { "output": "After swap: a = 20, b = 10" }, "notes": ["Use tuple assignment"], "testCases": [ { "input": "10 20", "expectedOutput": "After swap: a = 20, b = 10" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 133, "language": "python", "title": "Python Prime Number Checker", "description": "Write a Python function is_prime(n) that returns True if n is prime.", "examples": { "output": "True\nFalse" }, "notes": ["Return True for prime numbers, False otherwise", "Handle up to 1000"], "testCases": [ { "input": "17", "expectedOutput": "True" }, { "input": "4", "expectedOutput": "False" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 134, "language": "python", "title": "Python Factorial", "description": "Write a Python function to calculate the factorial of a number.", "examples": { "output": "120" }, "notes": ["Use recursion or loop"], "testCases": [ { "input": "5", "expectedOutput": "120" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 135, "language": "python", "title": "Python Fibonacci", "description": "Print the first N Fibonacci numbers.", "examples": { "output": "0 1 1 2 3" }, "notes": ["Use loop or recursion"], "testCases": [ { "input": "5", "expectedOutput": "0 1 1 2 3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 136, "language": "python", "title": "Python Reverse String", "description": "Reverse a given string in Python.", "examples": { "output": "cba" }, "notes": ["Use slicing"], "testCases": [ { "input": "abc", "expectedOutput": "cba" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 137, "language": "python", "title": "Python Palindrome Checker", "description": "Check if a string is a palindrome.", "examples": { "output": "True" }, "notes": ["Ignore case"], "testCases": [ { "input": "Madam", "expectedOutput": "True" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 138, "language": "python", "title": "Python Sum Array", "description": "Sum all elements in a list.", "examples": { "output": "15" }, "notes": ["Use sum()"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "15" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 139, "language": "python", "title": "Python Find Max", "description": "Find the maximum value in a list.", "examples": { "output": "9" }, "notes": ["Use max()"], "testCases": [ { "input": "[2,9,4,7]", "expectedOutput": "9" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 140, "language": "python", "title": "Python Count Vowels", "description": "Count the number of vowels in a string.", "examples": { "output": "3" }, "notes": ["Ignore case"], "testCases": [ { "input": "Hello", "expectedOutput": "2" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 141, "language": "python", "title": "Python Remove Spaces", "description": "Remove all spaces from a string.", "examples": { "output": "HelloWorld" }, "notes": ["Use replace()"], "testCases": [ { "input": "Hello World", "expectedOutput": "HelloWorld" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 142, "language": "python", "title": "Python List Sort", "description": "Sort a list of integers in ascending order.", "examples": { "output": "1 2 3 4 5" }, "notes": ["Use sorted()"], "testCases": [ { "input": "[5,3,1,4,2]", "expectedOutput": "1 2 3 4 5" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 143, "language": "python", "title": "Python Character Frequency", "description": "Count frequency of each character in a string.", "examples": { "output": "a:2 b:1" }, "notes": ["Use dict"], "testCases": [ { "input": "aba", "expectedOutput": "a:2 b:1" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 144, "language": "python", "title": "Python Leap Year", "description": "Check if a year is a leap year.", "examples": { "output": "True" }, "notes": ["Use modulo"], "testCases": [ { "input": "2020", "expectedOutput": "True" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 145, "language": "python", "title": "Python Sum Digits", "description": "Sum all digits of a number.", "examples": { "output": "6" }, "notes": ["Use loop"], "testCases": [ { "input": "123", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 146, "language": "python", "title": "Python Remove Duplicates", "description": "Remove duplicate elements from a list.", "examples": { "output": "1 2 3" }, "notes": ["Use set"], "testCases": [ { "input": "[1,2,2,3]", "expectedOutput": "1 2 3" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 147, "language": "python", "title": "Python Reverse List", "description": "Reverse a list of integers.", "examples": { "output": "5 4 3 2 1" }, "notes": ["Use slicing"], "testCases": [ { "input": "[1,2,3,4,5]", "expectedOutput": "5 4 3 2 1" } ], "difficulty": "beginner", "category": "Python", "points": 10 },
        { "id": 148, "language": "python", "title": "Python Sum Even Numbers", "description": "Sum all even numbers in a list.", "examples": { "output": "6" }, "notes": ["Use modulo"], "testCases": [ { "input": "[1,2,3,4]", "expectedOutput": "6" } ], "difficulty": "beginner", "category": "Python", "points": 10 }
            ,{
                "id": 120,
                "language": "java",
                "title": "Intermediate: Matrix Transpose",
                "description": "Write a Java method to transpose a 2D matrix.",
                "examples": { "output": "[[1,4],[2,5],[3,6]]" },
                "notes": ["Return a new transposed matrix"],
                "testCases": [ { "input": "[[1,2,3],[4,5,6]]", "expectedOutput": "[[1,4],[2,5],[3,6]]" } ],
                "difficulty": "intermediate",
                "category": "Java",
                "points": 20
            },
            {
                "id": 121,
                "language": "java",
                "title": "Advanced: Threaded Counter",
                "description": "Create a Java class that starts two threads, each incrementing a shared counter 1000 times.",
                "examples": { "output": "2000" },
                "notes": ["Use synchronization"],
                "testCases": [ { "input": "", "expectedOutput": "2000" } ],
                "difficulty": "advanced",
                "category": "Java",
                "points": 30
            },
            {
                "id": 122,
                "language": "java",
                "title": "Expert: Dijkstra's Algorithm",
                "description": "Implement Dijkstra's shortest path algorithm for a weighted graph in Java.",
                "examples": { "output": "Shortest path: 7" },
                "notes": ["Return shortest path cost"],
                "testCases": [ { "input": "graph, start, end", "expectedOutput": "7" } ],
                "difficulty": "expert",
                "category": "Java",
                "points": 40
            },
                {
                    "id": 123,
                    "language": "java",
                    "title": "Expert: Regex Email Validator",
                    "description": "Write a Java method that uses regex to validate email addresses.",
                    "examples": { "output": "true" },
                    "notes": ["Use Pattern and Matcher"],
                    "testCases": [ { "input": "test@example.com", "expectedOutput": "true" }, { "input": "bad-email", "expectedOutput": "false" } ],
                    "difficulty": "expert",
                    "category": "Java",
                    "points": 40
                },
                {
                    "id": 204,
                    "language": "python",
                    "title": "Expert: Decorator Logger",
                    "description": "Write a Python decorator that logs function calls and arguments.",
                    "examples": { "output": "Calling foo(1, 2)" },
                    "notes": ["Use functools.wraps"],
                    "testCases": [ { "input": "foo(1,2)", "expectedOutput": "Calling foo(1, 2)" } ],
                    "difficulty": "expert",
                    "category": "Python",
                    "points": 40
                },
                {
                    "id": 205,
                    "language": "python",
                    "title": "Expert: Async Web Scraper",
                    "description": "Write an async Python function that scrapes multiple URLs in parallel and returns their titles.",
                    "examples": { "output": "['Title1', 'Title2']" },
                    "notes": ["Use aiohttp and asyncio"],
                    "testCases": [ { "input": "['https://a.com', 'https://b.com']", "expectedOutput": "['Title1', 'Title2']" } ],
                    "difficulty": "expert",
                    "category": "Python",
                    "points": 40
                },
            {
                "id": 201,
                "language": "python",
                "title": "Intermediate: Dictionary Merge",
                "description": "Write a function merge_dicts(d1, d2) that merges two dictionaries, summing values for duplicate keys.",
                "examples": { "output": "{'a': 3, 'b': 5, 'c': 4}" },
                "notes": ["If a key exists in both, sum their values"],
                "testCases": [ { "input": "{'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c': 4}", "expectedOutput": "{'a': 3, 'b': 5, 'c': 4}" } ],
                "difficulty": "intermediate",
                "category": "Python",
                "points": 20
            },
            {
                "id": 202,
                "language": "python",
                "title": "Advanced: Sudoku Validator",
                "description": "Write a function is_valid_sudoku(board) that checks if a 9x9 Sudoku board is valid.",
                "examples": { "output": "True" },
                "notes": ["Check rows, columns, and 3x3 subgrids"],
                "testCases": [ { "input": "[[5,3,4,...]]", "expectedOutput": "True" } ],
                "difficulty": "advanced",
                "category": "Python",
                "points": 30
            },
            {
                "id": 203,
                "language": "python",
                "title": "Expert: LRU Cache",
                "description": "Implement an LRU (Least Recently Used) cache class with get and put methods.",
                "examples": { "output": "get(2) -> -1" },
                "notes": ["Use OrderedDict or custom logic"],
                "testCases": [ { "input": "put(1,1), put(2,2), get(1), put(3,3), get(2)", "expectedOutput": "-1" } ],
                "difficulty": "expert",
                "category": "Python",
                "points": 40
            }
    ]
}
